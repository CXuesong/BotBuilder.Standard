// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Bot.Connector
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;


    /// <summary>
    /// Extension methods for BotState.
    /// </summary>
    public static partial class BotStateExtensions
    {
        /// <summary>
        /// GetUserData
        /// </summary>
        /// Get a bots data for the user across all conversations
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        public static BotData GetUserData(this IBotState operations, string channelId, string userId)
        {
            return Task.Factory.StartNew(s => ((IBotState)s).GetUserDataAsync(channelId, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// GetUserData
        /// </summary>
        /// Get a bots data for the user across all conversations
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BotData> GetUserDataAsync(this IBotState operations, string channelId, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetUserDataWithHttpMessagesAsync(channelId, userId, null, cancellationToken).ConfigureAwait(false))
            {
                return await _result.HandleErrorAsync<BotData>().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// SetUserData
        /// </summary>
        /// Update the bot's data for a user
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        /// <param name='botData'>
        /// the new botdata
        /// </param>
        public static BotData SetUserData(this IBotState operations, string channelId, string userId, BotData botData)
        {
            return Task.Factory.StartNew(s => ((IBotState)s).SetUserDataAsync(channelId, userId, botData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// SetUserData
        /// </summary>
        /// Update the bot's data for a user
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        /// <param name='botData'>
        /// the new botdata
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BotData> SetUserDataAsync(this IBotState operations, string channelId, string userId, BotData botData, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.SetUserDataWithHttpMessagesAsync(channelId, userId, botData, null, cancellationToken).ConfigureAwait(false))
            {
                return await _result.HandleErrorAsync<BotData>().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// DeleteStateForUser
        /// </summary>
        /// Delete all data for a user in a channel (UserData and
        /// PrivateConversationData)
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        public static string[] DeleteStateForUser(this IBotState operations, string channelId, string userId)
        {
            return Task.Factory.StartNew(s => ((IBotState)s).DeleteStateForUserAsync(channelId, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// DeleteStateForUser
        /// </summary>
        /// Delete all data for a user in a channel (UserData and
        /// PrivateConversationData)
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<string[]> DeleteStateForUserAsync(this IBotState operations, string channelId, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.DeleteStateForUserWithHttpMessagesAsync(channelId, userId, null, cancellationToken).ConfigureAwait(false))
            {
                return await _result.HandleErrorAsync<string[]>().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// GetConversationData
        /// </summary>
        /// get the bots data for all users in a conversation
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// the channelId
        /// </param>
        /// <param name='conversationId'>
        /// The id for the conversation on the channel
        /// </param>
        public static BotData GetConversationData(this IBotState operations, string channelId, string conversationId)
        {
            return Task.Factory.StartNew(s => ((IBotState)s).GetConversationDataAsync(channelId, conversationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// GetConversationData
        /// </summary>
        /// get the bots data for all users in a conversation
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// the channelId
        /// </param>
        /// <param name='conversationId'>
        /// The id for the conversation on the channel
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BotData> GetConversationDataAsync(this IBotState operations, string channelId, string conversationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetConversationDataWithHttpMessagesAsync(channelId, conversationId, null, cancellationToken).ConfigureAwait(false))
            {
                return await _result.HandleErrorAsync<BotData>().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// SetConversationData
        /// </summary>
        /// Update the bot's data for all users in a conversation
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='conversationId'>
        /// The id for the conversation on the channel
        /// </param>
        /// <param name='botData'>
        /// the new botdata
        /// </param>
        public static BotData SetConversationData(this IBotState operations, string channelId, string conversationId, BotData botData)
        {
            return Task.Factory.StartNew(s => ((IBotState)s).SetConversationDataAsync(channelId, conversationId, botData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// SetConversationData
        /// </summary>
        /// Update the bot's data for all users in a conversation
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='conversationId'>
        /// The id for the conversation on the channel
        /// </param>
        /// <param name='botData'>
        /// the new botdata
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BotData> SetConversationDataAsync(this IBotState operations, string channelId, string conversationId, BotData botData, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.SetConversationDataWithHttpMessagesAsync(channelId, conversationId, botData, null, cancellationToken).ConfigureAwait(false))
            {
                return await _result.HandleErrorAsync<BotData>().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// GetPrivateConversationData
        /// </summary>
        /// get bot's data for a single user in a conversation
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='conversationId'>
        /// The id for the conversation on the channel
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        public static BotData GetPrivateConversationData(this IBotState operations, string channelId, string conversationId, string userId)
        {
            return Task.Factory.StartNew(s => ((IBotState)s).GetPrivateConversationDataAsync(channelId, conversationId, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// GetPrivateConversationData
        /// </summary>
        /// get bot's data for a single user in a conversation
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='conversationId'>
        /// The id for the conversation on the channel
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BotData> GetPrivateConversationDataAsync(this IBotState operations, string channelId, string conversationId, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetPrivateConversationDataWithHttpMessagesAsync(channelId, conversationId, userId, null, cancellationToken).ConfigureAwait(false))
            {
                return await _result.HandleErrorAsync<BotData>().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// SetPrivateConversationData
        /// </summary>
        /// Update the bot's data for a single user in a conversation
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='conversationId'>
        /// The id for the conversation on the channel
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        /// <param name='botData'>
        /// the new botdata
        /// </param>
        public static BotData SetPrivateConversationData(this IBotState operations, string channelId, string conversationId, string userId, BotData botData)
        {
            return Task.Factory.StartNew(s => ((IBotState)s).SetPrivateConversationDataAsync(channelId, conversationId, userId, botData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// SetPrivateConversationData
        /// </summary>
        /// Update the bot's data for a single user in a conversation
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='channelId'>
        /// channelId
        /// </param>
        /// <param name='conversationId'>
        /// The id for the conversation on the channel
        /// </param>
        /// <param name='userId'>
        /// id for the user on the channel
        /// </param>
        /// <param name='botData'>
        /// the new botdata
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BotData> SetPrivateConversationDataAsync(this IBotState operations, string channelId, string conversationId, string userId, BotData botData, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.SetPrivateConversationDataWithHttpMessagesAsync(channelId, conversationId, userId, botData, null, cancellationToken).ConfigureAwait(false))
            {
                return await _result.HandleErrorAsync<BotData>().ConfigureAwait(false);
            }
        }

    }
}
