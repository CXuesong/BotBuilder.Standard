<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Connector</name>
    </assembly>
    <members>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.MicrosoftAppId">
            <summary>
            Microsoft AppId for the bot 
            </summary>
            <remarks>
            Needs to be used with MicrosoftAppPassword.  Ignored if CredentialProviderType is specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.MicrosoftAppPassword">
            <summary>
            Microsoft AppPassword for the bot (needs to be used with MicrosoftAppId)
            </summary>
            <remarks>
            Needs to be used with MicrosoftAppId. Ignored if CredentialProviderType is specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.MicrosoftAppIdSettingName">
            <summary>
            Name of Setting in web.config which has the Microsoft AppId for the bot 
            </summary>
            <remarks>
            Needs to be used with MicrosoftAppPasswordSettingName. Ignored if CredentialProviderType is specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.MicrosoftAppPasswordSettingName">
            <summary>
            Name of Setting in web.config which has the Microsoft App Password for the bot 
            </summary>
            <remarks>
            Needs to be used with MicrosoftAppIdSettingName. Ignored if CredentialProviderType is specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.CredentialProviderType">
            <summary>
            Type which implements ICredentialProvider interface to allow multiple bot AppIds to be registered for the same endpoint
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.OpenUrl">
            <summary>
            Client will open given url in the built-in browser.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.ImBack">
            <summary>
            Client will post message to bot, so all other participants will see that was posted to the bot and who posted this.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.PostBack">
            <summary>
            Client will post message to bot privately, so other participants inside conversation will not see that was posted. 
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.PlayAudio">
            <summary>
            playback audio container referenced by url
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.PlayVideo">
            <summary>
            playback video container referenced by url
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.ShowImage">
            <summary>
            show image referenced by url
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.DownloadFile">
            <summary>
            download file referenced by url
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.Signin">
            <summary>
            Signin button
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.MessageBack">
            <summary>
            Post message to bot
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Activity">
            <summary>
            An Activity is the basic communication type for the Bot Framework 3.0 protocol
            </summary>
            <remarks>
            The Activity class contains all properties that individual, more specific activities
            could contain. It is a superset type.
            </remarks>
            <summary>
            An Activity is the basic communication type for the Bot Framework 3.0
            protocol
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Activity.ContentType">
            <summary>
            Content-type for an Activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateReply(System.String,System.String)">
            <summary>
            Take a message and create a reply message for it with the routing information 
            set up to correctly route a reply to the source message
            </summary>
            <param name="text">text you want to reply with</param>
            <param name="locale">language of your reply</param>
            <returns>message set up to route back to the sender</returns>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Properties">
            <summary>
            Extension data for overflow of properties
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateMessageActivity">
            <summary>
            Create an instance of the Activity class with IMessageActivity masking
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateContactRelationUpdateActivity">
            <summary>
            Create an instance of the Activity class with IContactRelationUpdateActivity masking
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateConversationUpdateActivity">
            <summary>
            Create an instance of the Activity class with IConversationUpdateActivity masking
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateTypingActivity">
            <summary>
            Create an instance of the Activity class with ITypingActivity masking
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreatePingActivity">
            <summary>
            Create an instance of the Activity class with IActivity masking
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateEndOfConversationActivity">
            <summary>
            Create an instance of the Activity class with IEndOfConversationActivity masking
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateEventActivity">
            <summary>
            Create an instance of the Activity class with an IEventActivity masking
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateInvokeActivity">
            <summary>
            Create an instance of the Activity class with IInvokeActivity masking
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.IsActivity(System.String)">
            <summary>
            True if the Activity is of the specified activity type
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsMessageActivity">
            <summary>
            Return an IMessageActivity mask if this is a message activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsContactRelationUpdateActivity">
            <summary>
            Return an IContactRelationUpdateActivity mask if this is a contact relation update activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsInstallationUpdateActivity">
            <summary>
            Return an IInstallationUpdateActivity mask if this is a installation update activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsConversationUpdateActivity">
            <summary>
            Return an IConversationUpdateActivity mask if this is a conversation update activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsTypingActivity">
            <summary>
            Return an ITypingActivity mask if this is a typing activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsEndOfConversationActivity">
            <summary>
            Return an IEndOfConversationActivity mask if this is an end of conversation activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsEventActivity">
            <summary>
            Return an IEventActivity mask if this is an event activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsInvokeActivity">
            <summary>
            Return an IInvokeActivity mask if this is an invoke activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsMessageUpdateActivity">
            <summary>
            Return an IMessageUpdateAcitvity if this is a MessageUpdate activity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsMessageDeleteActivity">
            <summary>
            Return an IMessageDeleteActivity if this is a MessageDelete activity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsMessageReactionActivity">
            <summary>
            Return an IMessageReactionActivity if this is a MessageReaction activity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsSuggestionActivity">
            <summary>
            Return an ISuggestionActivity if this is a Suggestion activity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.GetActivityType(System.String)">
            <summary>
            Normalize activity type 
            </summary>
            <param name="type"> The type.</param>
            <returns> The activity type.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.HasContent">
            <summary>
            Checks if this (message) activity has content.
            </summary>
            <returns>Returns true, if this message has any content to send. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.GetMentions">
            <summary>
            Resolves the mentions from the entities of this (message) activity.
            </summary>
            <returns>The array of mentions or an empty array, if none found.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.GetChannelData``1">
            <summary>
            Get channeldata as typed structure
            </summary>
            <param name="activity"></param>
            <typeparam name="TypeT">type to use</typeparam>
            <returns>typed object or default(TypeT)</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.TryGetChannelData``1(``0@)">
            <summary>
            Get channeldata as typed structure
            </summary>
            <param name="activity"></param>
            <typeparam name="TypeT">type to use</typeparam>
            <param name="instance">The resulting instance, if possible</param>
            <returns>
            <c>true</c> if value of <seealso cref="P:Microsoft.Bot.Connector.IActivity.ChannelData"/> was coerceable to <typeparamref name="TypeT"/>, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.#ctor">
            <summary>
            Initializes a new instance of the Activity class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.#ctor(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ConversationAccount,Microsoft.Bot.Connector.ChannelAccount,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.ChannelAccount},System.Collections.Generic.IList{Microsoft.Bot.Connector.ChannelAccount},System.Collections.Generic.IList{Microsoft.Bot.Connector.MessageReaction},System.Collections.Generic.IList{Microsoft.Bot.Connector.MessageReaction},System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,Microsoft.Bot.Connector.SuggestedActions,System.Collections.Generic.IList{Microsoft.Bot.Connector.Attachment},System.Collections.Generic.IList{Microsoft.Bot.Connector.Entity},System.Object,System.String,System.String,System.Object,System.String,Microsoft.Bot.Connector.ConversationReference,System.String,System.Nullable{System.DateTimeOffset},System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.TextHighlight})">
            <summary>
            Initializes a new instance of the Activity class.
            </summary>
            <param name="type">The type of the activity
            [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]</param>
            <param name="id">ID of this activity</param>
            <param name="timestamp">UTC Time when message was sent (set by
            service)</param>
            <param name="localTimestamp">Local time when message was sent (set
            by client, Ex: 2016-09-23T13:07:49.4714686-07:00)</param>
            <param name="serviceUrl">Service endpoint where operations
            concerning the activity may be performed</param>
            <param name="channelId">ID of the channel where the activity was
            sent</param>
            <param name="from">Sender address</param>
            <param name="conversation">Conversation</param>
            <param name="recipient">(Outbound to bot only) Bot's address that
            received the message</param>
            <param name="textFormat">Format of text fields [plain|markdown]
            Default:markdown</param>
            <param name="attachmentLayout">Hint for how to deal with multiple
            attachments: [list|carousel] Default:list</param>
            <param name="membersAdded">Members added to the
            conversation</param>
            <param name="membersRemoved">Members removed from the
            conversation</param>
            <param name="reactionsAdded">Reactions added to the
            activity</param>
            <param name="reactionsRemoved">Reactions removed from the
            activity</param>
            <param name="topicName">The conversation's updated topic
            name</param>
            <param name="historyDisclosed">True if prior history of the channel
            is disclosed</param>
            <param name="locale">The language code of the Text field</param>
            <param name="text">Content for the message</param>
            <param name="speak">SSML Speak for TTS audio response</param>
            <param name="inputHint">Indicates whether the bot is accepting,
            expecting, or ignoring input</param>
            <param name="summary">Text to display if the channel cannot render
            cards</param>
            <param name="suggestedActions">SuggestedActions are used to provide
            keyboard/quickreply like behavior in many clients</param>
            <param name="attachments">Attachments</param>
            <param name="entities">Collection of Entity objects, each of which
            contains metadata about this activity. Each Entity object is
            typed.</param>
            <param name="channelData">Channel-specific payload</param>
            <param name="action">ContactAdded/Removed action</param>
            <param name="replyToId">The original ID this message is a response
            to</param>
            <param name="value">Open-ended value</param>
            <param name="name">Name of the operation to invoke or the name of
            the event</param>
            <param name="relatesTo">Reference to another conversation or
            activity</param>
            <param name="code">Code indicating why the conversation has
            ended</param>
            <param name="expiration">DateTime to expire the activity as ISO
            8601 encoded datetime</param>
            <param name="importance">Importance of this activity
            {Low|Normal|High}, null value indicates Normal importance see
            ActivityImportance)</param>
            <param name="deliveryMode">Hint to describe how this activity
            should be delivered.
            Currently: null or "Default" = default delivery
            "Notification" = notification semantics</param>
            <param name="textHighlights">TextHighlight in the activity
            represented in the ReplyToId property</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Type">
            <summary>
            Gets or sets the type of the activity
            [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Id">
            <summary>
            Gets or sets ID of this activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Timestamp">
            <summary>
            Gets or sets UTC Time when message was sent (set by service)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.LocalTimestamp">
            <summary>
            Gets or sets local time when message was sent (set by client, Ex:
            2016-09-23T13:07:49.4714686-07:00)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ServiceUrl">
            <summary>
            Gets or sets service endpoint where operations concerning the
            activity may be performed
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ChannelId">
            <summary>
            Gets or sets ID of the channel where the activity was sent
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.From">
            <summary>
            Gets or sets sender address
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Conversation">
            <summary>
            Gets or sets conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Recipient">
            <summary>
            Gets or sets (Outbound to bot only) Bot's address that received the
            message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.TextFormat">
            <summary>
            Gets or sets format of text fields [plain|markdown]
            Default:markdown
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.AttachmentLayout">
            <summary>
            Gets or sets hint for how to deal with multiple attachments:
            [list|carousel] Default:list
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.MembersAdded">
            <summary>
            Gets or sets members added to the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.MembersRemoved">
            <summary>
            Gets or sets members removed from the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ReactionsAdded">
            <summary>
            Gets or sets reactions added to the activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ReactionsRemoved">
            <summary>
            Gets or sets reactions removed from the activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.TopicName">
            <summary>
            Gets or sets the conversation's updated topic name
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.HistoryDisclosed">
            <summary>
            Gets or sets true if prior history of the channel is disclosed
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Locale">
            <summary>
            Gets or sets the language code of the Text field
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Text">
            <summary>
            Gets or sets content for the message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Speak">
            <summary>
            Gets or sets SSML Speak for TTS audio response
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.InputHint">
            <summary>
            Gets or sets indicates whether the bot is accepting, expecting, or
            ignoring input
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Summary">
            <summary>
            Gets or sets text to display if the channel cannot render cards
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.SuggestedActions">
            <summary>
            Gets or sets suggestedActions are used to provide
            keyboard/quickreply like behavior in many clients
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Attachments">
            <summary>
            Gets or sets attachments
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Entities">
            <summary>
            Gets or sets collection of Entity objects, each of which contains
            metadata about this activity. Each Entity object is typed.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ChannelData">
            <summary>
            Gets or sets channel-specific payload
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Action">
            <summary>
            Gets or sets contactAdded/Removed action
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ReplyToId">
            <summary>
            Gets or sets the original ID this message is a response to
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Value">
            <summary>
            Gets or sets open-ended value
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Name">
            <summary>
            Gets or sets name of the operation to invoke or the name of the
            event
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.RelatesTo">
            <summary>
            Gets or sets reference to another conversation or activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Code">
            <summary>
            Gets or sets code indicating why the conversation has ended
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Expiration">
            <summary>
            Gets or sets dateTime to expire the activity as ISO 8601 encoded
            datetime
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Importance">
            <summary>
            Gets or sets importance of this activity
            {Low|Normal|High}, null value indicates Normal importance see
            ActivityImportance)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.DeliveryMode">
            <summary>
            Gets or sets hint to describe how this activity should be
            delivered.
            Currently: null or "Default" = default delivery
            "Notification" = notification semantics
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.TextHighlights">
            <summary>
            Gets or sets textHighlight in the activity represented in the
            ReplyToId property
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ActivityExtensions.GetActivityType(Microsoft.Bot.Connector.IActivity)">
            <summary>
            Normalize ActivityType 
            </summary>
            <param name="activity"></param>
            <returns>normalized activity type</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ActivityExtensions.MentionsId(Microsoft.Bot.Connector.IMessageActivity,System.String)">
            <summary>
            Is there a mention of Id in the Text Property 
            </summary>
            <param name="id">ChannelAccount.Id</param>
            <param name="activity"></param>
            <returns>true if this id is mentioned in the text</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ActivityExtensions.MentionsRecipient(Microsoft.Bot.Connector.IMessageActivity)">
            <summary>
            Is there a mention of Recipient.Id in the Text Property 
            </summary>
            <param name="activity"></param>
            <returns>true if this id is mentioned in the text</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ActivityExtensions.RemoveRecipientMention(Microsoft.Bot.Connector.IMessageActivity)">
            <summary>
            Remove recipient mention text from Text property
            </summary>
            <param name="activity"></param>
            <returns>new .Text property value</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ActivityExtensions.RemoveMentionText(Microsoft.Bot.Connector.IMessageActivity,System.String)">
            <summary>
            Replace any mention text for given id from Text property
            </summary>
            <param name="id">id to match</param>
            <param name="activity"></param>
            <returns>new .Text property value</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.ActivityTypes">
            <summary>
            Types of Activities
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Message">
            <summary>
            Message from a user -> bot or bot -> User
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.ContactRelationUpdate">
            <summary>
            Bot added removed to contact list
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.ConversationUpdate">
            <summary>
            This notification is sent when the conversation's properties change, for example the topic name, or when user joins or leaves the group.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Typing">
            <summary>
            a user is typing
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Ping">
            <summary>
            Bounce a message off of the server without replying or changing it's state
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.EndOfConversation">
            <summary>
            End a conversation
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Event">
            <summary>
            Asynchronous external event
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Invoke">
            <summary>
            Synchronous request to invoke a command
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.DeleteUserData">
            <summary>
            Delete user data
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.MessageUpdate">
            <summary>
            An update to an existing Message Activity
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.MessageDelete">
            <summary>
            Indicates a delete of an existing Message Activity
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.InstallationUpdate">
            <summary>
            Bot added or removed from channel
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.MessageReaction">
            <summary>
            Reaction added or removed from activity
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Suggestion">
            <summary>
            Suggestion activity - private message 
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Attachments">
            <summary>
            Attachments operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentUri(System.String,System.String)">
            <summary>
            Get the URI of an attachment view
            </summary>
            <param name="attachmentId"></param>
            <param name="viewId">default is "original"</param>
            <returns>uri</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentStreamAsync(System.String,System.String)">
            <summary>
            Get the given attachmentid view as a stream
            </summary>
            <param name="attachmentId">attachmentid</param>
            <param name="viewId">view to get (default:original)</param>
            <returns>stream of attachment</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.#ctor(Microsoft.Bot.Connector.ConnectorClient)">
            <summary>
            Initializes a new instance of the Attachments class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachments.Client">
            <summary>
            Gets a reference to the ConnectorClient
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views
            </remarks>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            <remarks>
            Get the named view as binary content
            </remarks>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Bot.Connector.BotAuthenticator.EndorsementsValidator">
            <summary>
            The endorsements validator delegate. 
            </summary>
            <param name="activities"> The activities.</param>
            <param name="endorsements"> The endorsements used for validation.</param>
            <returns>true if validation passes; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotAuthenticator.#ctor(System.String,System.String,Microsoft.Bot.Connector.BotAuthenticator.EndorsementsValidator)">
            <summary>
            Creates an instance of bot authenticator. 
            </summary>
            <param name="microsoftAppId"> The Microsoft app Id.</param>
            <param name="microsoftAppPassword"> The Microsoft app password.</param>
            <param name="validator"> The endorsements validator.</param>
            <remarks> This constructor sets the <see cref="F:Microsoft.Bot.Connector.BotAuthenticator.openIdConfigurationUrl"/> to 
            <see cref="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromChannelOpenIdMetadataUrl"/>  and doesn't disable 
            the self issued tokens used by emulator.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotAuthenticator.GenerateUnauthorizedResponse(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Generates <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> response for the request.
            </summary>
            <param name="request">The request.</param>
            <param name="reason">The reason phrase for unauthorized status code.</param>
            <returns>A response with status code unauthorized.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotAuthenticator.TryAuthenticateAsync(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{Microsoft.Bot.Connector.IActivity},System.Threading.CancellationToken)">
            <summary>
            Authenticates the incoming request and add the <see cref="P:Microsoft.Bot.Connector.IActivity.ServiceUrl"/> for each
            activities to <see cref="F:Microsoft.Bot.Connector.MicrosoftAppCredentials.TrustedHostNames"/> if the request is authenticated.
            </summary>
            <param name="request"> The request that should be authenticated.</param>
            <param name="activities"> The activities extracted from request.</param>
            <param name="token"> The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotAuthenticator.AuthenticateAsync(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{Microsoft.Bot.Connector.IActivity},System.Threading.CancellationToken)">
            <summary>
            Authenticates the request and returns the IdentityToken.
            </summary>
            <param name="request"> The request that should be authenticated.</param>
            <param name="activities"> The activities extracted from request.</param>
            <param name="token"> The cancellation token.</param>
            <returns> The <see cref="T:Microsoft.Bot.Connector.IdentityToken"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.GetProperty``1(System.String)">
            <summary>
            Get a property from a BotData recorded retrieved using the REST API
            </summary>
            <param name="property">property name to change</param>
            <returns>property requested or default for type</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.SetProperty``1(System.String,``0)">
            <summary>
            Set a property on a BotData record retrieved using the REST API
            </summary>
            <param name="property">property name to change</param>
            <param name="data">new data</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.RemoveProperty(System.String)">
            <summary>
            Remove a property from the BotData record
            </summary>
            <param name="property">property name to remove</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.#ctor">
            <summary>
            Initializes a new instance of the BotData class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the BotData class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotData.Data">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotData.ETag">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.HeroCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.HeroCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.HeroCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.ThumbnailCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.ThumbnailCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.ThumbnailCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.SigninCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.SigninCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.SigninCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.ReceiptCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.ReceiptCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.ReceiptCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.AudioCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.AudioCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.AudioCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.VideoCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.VideoCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.VideoCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.AnimationCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.AnimationCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.AnimationCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.ChannelAccount">
            <summary>
            Channel account information needed to route a message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ChannelAccount.Properties">
            <summary>
            Extension data for overflow of properties
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ChannelAccount.#ctor">
            <summary>
            Initializes a new instance of the ChannelAccount class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ChannelAccount.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ChannelAccount class.
            </summary>
            <param name="id">Channel id for the user or bot on this channel
            (Example: joe@smith.com, or @joesmith or 123456)</param>
            <param name="name">Display friendly name</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ChannelAccount.Id">
            <summary>
            Gets or sets channel id for the user or bot on this channel
            (Example: joe@smith.com, or @joesmith or 123456)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ChannelAccount.Name">
            <summary>
            Gets or sets display friendly name
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppIdFromClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the AppId from the Claims Identity
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppPasswordFromClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the AppPassword from the Claims Identity
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetCredentialsFromClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the MicrosoftAppCredentials using claims in the claims identity
            </summary>
            <param name="claimsIdentity"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentsExtensions">
            <summary>
            Extension methods for Attachments.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfo(Microsoft.Bot.Connector.IAttachments,System.String)">
            <summary>
            GetAttachmentInfo
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfoAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachment(Microsoft.Bot.Connector.IAttachments,System.String,System.String)">
            <summary>
            GetAttachment
            </summary>
            <remarks>
            Get the named view as binary content
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            <remarks>
            Get the named view as binary content
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConnectorClient">
             <summary>
             The Bot Connector REST API allows your bot to send and receive messages
             to channels configured in the
             [Bot Framework Developer Portal](https://dev.botframework.com). The
             Connector service uses industry-standard REST
             and JSON over HTTPS.
            
             Client libraries for this REST API are available. See below for a list.
            
             Many bots will use both the Bot Connector REST API and the associated
             [Bot State REST API](/en-us/restapi/state). The
             Bot State REST API allows a bot to store and retrieve state associated
             with users and conversations.
            
             Authentication for both the Bot Connector and Bot State REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](/en-us/restapi/authentication) document.
            
             # Client Libraries for the Bot Connector REST API
            
             * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for Node.js](/en-us/node/builder/overview/)
             * Generate your own from the [Connector API Swagger
             file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)
            
             © 2016 Microsoft
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Attachments">
            <summary>
            Gets the IAttachments.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Conversations">
            <summary>
            Gets the IConversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.String,System.String,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the ConnectorClient class
            </summary>
            <param name="baseUri">Base URI for the Connector service</param>
            <param name="microsoftAppId">Optional. Your Microsoft app id. If null, this setting is read from settings["MicrosoftAppId"]</param>
            <param name="microsoftAppPassword">Optional. Your Microsoft app password. If null, this setting is read from settings["MicrosoftAppPassword"]</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the ConnectorClient class
            </summary>
            <param name="baseUri">Base URI for the Connector service</param>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="addJwtTokenRefresher">True, if JwtTokenRefresher should be included; False otherwise.</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.Net.Http.HttpClientHandler,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instances of the ConnectorClient.
            </summary>
            <param name="baseUri">Base URI for the Connector service</param>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="httpClientHandler">The httpClientHandler used by http client</param>
            <param name="addJwtTokenRefresher">True, if JwtTokenRefresher should be included; False otherwise.</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Conversations">
            <summary>
            Conversations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.#ctor(Microsoft.Bot.Connector.ConnectorClient)">
            <summary>
            Initializes a new instance of the Conversations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.Conversations.Client">
            <summary>
            Gets a reference to the ConnectorClient
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.CreateConversationWithHttpMessagesAsync(Microsoft.Bot.Connector.ConversationParameters,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             CreateConversation
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is false)
             * Members array contining the members you want to have be in the
             conversation.
            
             The return value is a ResourceResponse which contains a conversation id
             which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a direct
             message conversation.  An example of how to do that would be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
             ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id, new
             Activity() ... ) ;
            
             ```
             </remarks>
             <param name='parameters'>
             Parameters to create the conversation from
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.SendToConversationWithHttpMessagesAsync(System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendToConversation
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConverstion(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.UpdateActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UpdateActivity
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the new
             state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked "Approve"
             button.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to update
             </param>
             <param name='activity'>
             replacement Activity
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.ReplyToActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConverstion(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL)
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.DeleteActivityWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteActivity
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if successful
             this method will remove the specified activity.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to delete
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationMembersWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers
             </summary>
             <remarks>
             Enumerate the members of a converstion.
            
             This REST API takes a ConversationId and returns an array of ChannelAccount
             objects representing the members of the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetActivityMembersWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an array
             of ChannelAccount objects representing the members of the particular
             activity in the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             Activity ID
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.UploadAttachmentWithHttpMessagesAsync(System.String,Microsoft.Bot.Connector.AttachmentData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UploadAttachment
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant store
             when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId which is
             suitable for using with the attachments API.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='attachmentUpload'>
             Attachment data
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationsExtensions">
            <summary>
            Extension methods for Conversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ConversationParameters)">
             <summary>
             CreateConversation
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is false)
             * Members array contining the members you want to have be in the
             conversation.
            
             The return value is a ResourceResponse which contains a conversation id
             which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a direct
             message conversation.  An example of how to do that would be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
             ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id, new
             Activity() ... ) ;
            
             ```
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='parameters'>
             Parameters to create the conversation from
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ConversationParameters,System.Threading.CancellationToken)">
             <summary>
             CreateConversation
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is false)
             * Members array contining the members you want to have be in the
             conversation.
            
             The return value is a ResourceResponse which contains a conversation id
             which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a direct
             message conversation.  An example of how to do that would be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
             ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id, new
             Activity() ... ) ;
            
             ```
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='parameters'>
             Parameters to create the conversation from
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Activity)">
             <summary>
             SendToConversation
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConverstion(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activity'>
             Activity to send
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
             <summary>
             SendToConversation
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConverstion(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)">
             <summary>
             UpdateActivity
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the new
             state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked "Approve"
             button.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to update
             </param>
             <param name='activity'>
             replacement Activity
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
             <summary>
             UpdateActivity
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the new
             state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked "Approve"
             button.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to update
             </param>
             <param name='activity'>
             replacement Activity
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)">
             <summary>
             ReplyToActivity
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConverstion(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL)
             </param>
             <param name='activity'>
             Activity to send
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConverstion(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL)
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String)">
             <summary>
             DeleteActivity
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if successful
             this method will remove the specified activity.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to delete
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             DeleteActivity
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if successful
             this method will remove the specified activity.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to delete
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembers(Microsoft.Bot.Connector.IConversations,System.String)">
             <summary>
             GetConversationMembers
             </summary>
             <remarks>
             Enumerate the members of a converstion.
            
             This REST API takes a ConversationId and returns an array of ChannelAccount
             objects representing the members of the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers
             </summary>
             <remarks>
             Enumerate the members of a converstion.
            
             This REST API takes a ConversationId and returns an array of ChannelAccount
             objects representing the members of the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembers(Microsoft.Bot.Connector.IConversations,System.String,System.String)">
             <summary>
             GetActivityMembers
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an array
             of ChannelAccount objects representing the members of the particular
             activity in the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             Activity ID
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an array
             of ChannelAccount objects representing the members of the particular
             activity in the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             Activity ID
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachment(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.AttachmentData)">
             <summary>
             UploadAttachment
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant store
             when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId which is
             suitable for using with the attachments API.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='attachmentUpload'>
             Attachment data
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.AttachmentData,System.Threading.CancellationToken)">
             <summary>
             UploadAttachment
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant store
             when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId which is
             suitable for using with the attachments API.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='attachmentUpload'>
             Attachment data
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.Activity)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='bot'>Bot to create conversation from</param>
            <param name='user'>User to create conversation with</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='bot'>Bot to create conversation from</param>
            <param name='user'>User to create conversation with</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
            <param name='cancellationToken'>The cancellation token.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='botAddress'>Bot to create conversation from</param>
            <param name='userAddress'>User to create conversation with</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='botAddress'>Bot to create conversation from</param>
            <param name='userAddress'>User to create conversation with</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
            <param name='cancellationToken'>The cancellation token</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)">
            <summary>
            Send an activity to a conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            Send an activity to a conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)">
            <summary>
            Replyto an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            Reply to an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)">
            <summary>
            Update an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to update
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            Update an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to update
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.IAttachments">
            <summary>
            Attachments operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IAttachments.GetAttachmentInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views
            </remarks>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IAttachments.GetAttachmentWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            <remarks>
            Get the named view as binary content
            </remarks>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConnectorClient">
             <summary>
             The Bot Connector REST API allows your bot to send and receive messages
             to channels configured in the
             [Bot Framework Developer Portal](https://dev.botframework.com). The
             Connector service uses industry-standard REST
             and JSON over HTTPS.
            
             Client libraries for this REST API are available. See below for a list.
            
             Many bots will use both the Bot Connector REST API and the associated
             [Bot State REST API](/en-us/restapi/state). The
             Bot State REST API allows a bot to store and retrieve state associated
             with users and conversations.
            
             Authentication for both the Bot Connector and Bot State REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](/en-us/restapi/authentication) document.
            
             # Client Libraries for the Bot Connector REST API
            
             * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for Node.js](/en-us/node/builder/overview/)
             * Generate your own from the [Connector API Swagger
             file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)
            
             © 2016 Microsoft
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client
            subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Attachments">
            <summary>
            Gets the IAttachments.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Conversations">
            <summary>
            Gets the IConversations.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConversations">
            <summary>
            Conversations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.CreateConversationWithHttpMessagesAsync(Microsoft.Bot.Connector.ConversationParameters,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             CreateConversation
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is
             false)
             * Members array contining the members you want to have be in the
             conversation.
            
             The return value is a ResourceResponse which contains a
             conversation id which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a
             direct message conversation.  An example of how to do that would
             be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[]
             { new ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id,
             new Activity() ... ) ;
            
             ```
             </remarks>
             <param name='parameters'>
             Parameters to create the conversation from
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.SendToConversationWithHttpMessagesAsync(System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendToConversation
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a
             conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConverstion(conversationId) - will append the activity to
             the end of the conversation according to the timestamp or semantics
             of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as
             a reply to another activity, if the channel supports it. If the
             channel does not support nested replies, ReplyToActivity falls back
             to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.UpdateActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UpdateActivity
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the
             new state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked
             "Approve" button.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to update
             </param>
             <param name='activity'>
             replacement Activity
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.ReplyToActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConverstion(conversationId) - will append the activity to
             the end of the conversation according to the timestamp or semantics
             of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as
             a reply to another activity, if the channel supports it. If the
             channel does not support nested replies, ReplyToActivity falls back
             to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL)
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.DeleteActivityWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteActivity
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if
             successful this method will remove the specified activity.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to delete
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetConversationMembersWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers
             </summary>
             <remarks>
             Enumerate the members of a converstion.
            
             This REST API takes a ConversationId and returns an array of
             ChannelAccount objects representing the members of the
             conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetActivityMembersWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an
             array of ChannelAccount objects representing the members of the
             particular activity in the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             Activity ID
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.UploadAttachmentWithHttpMessagesAsync(System.String,Microsoft.Bot.Connector.AttachmentData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UploadAttachment
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant
             store when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId
             which is suitable for using with the attachments API.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='attachmentUpload'>
             Attachment data
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.AnimationCard">
            <summary>
            An animation card (Ex: gif or short video clip)
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AnimationCard.#ctor">
            <summary>
            Initializes a new instance of the AnimationCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AnimationCard.#ctor(System.String,System.String,System.String,Microsoft.Bot.Connector.ThumbnailUrl,System.Collections.Generic.IList{Microsoft.Bot.Connector.MediaUrl},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object)">
            <summary>
            Initializes a new instance of the AnimationCard class.
            </summary>
            <param name="title">Title of this card</param>
            <param name="subtitle">Subtitle of this card</param>
            <param name="text">Text of this card</param>
            <param name="image">Thumbnail placeholder</param>
            <param name="media">Media URLs for this card</param>
            <param name="buttons">Actions on this card</param>
            <param name="shareable">This content may be shared with others
            (default:true)</param>
            <param name="autoloop">Should the client loop playback at end of
            content (default:true)</param>
            <param name="autostart">Should the client automatically start
            playback of media in this card (default:true)</param>
            <param name="aspect">Aspect ratio of thumbnail/media placeholder,
            allowed values are "16:9" and "4:3"</param>
            <param name="value">Supplementary parameter for this card</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Title">
            <summary>
            Gets or sets title of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Subtitle">
            <summary>
            Gets or sets subtitle of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Text">
            <summary>
            Gets or sets text of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Image">
            <summary>
            Gets or sets thumbnail placeholder
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Media">
            <summary>
            Gets or sets media URLs for this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Buttons">
            <summary>
            Gets or sets actions on this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Shareable">
            <summary>
            Gets or sets this content may be shared with others (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Autoloop">
            <summary>
            Gets or sets should the client loop playback at end of content
            (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Autostart">
            <summary>
            Gets or sets should the client automatically start playback of
            media in this card (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Aspect">
            <summary>
            Gets or sets aspect ratio of thumbnail/media placeholder, allowed
            values are "16:9" and "4:3"
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Value">
            <summary>
            Gets or sets supplementary parameter for this card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AnimationCard.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.Attachment">
            <summary>
            An attachment within an activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachment.#ctor">
            <summary>
            Initializes a new instance of the Attachment class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachment.#ctor(System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the Attachment class.
            </summary>
            <param name="contentType">mimetype/Contenttype for the file</param>
            <param name="contentUrl">Content Url</param>
            <param name="content">Embedded content</param>
            <param name="name">(OPTIONAL) The name of the attachment</param>
            <param name="thumbnailUrl">(OPTIONAL) Thumbnail associated with
            attachment</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.ContentType">
            <summary>
            Gets or sets mimetype/Contenttype for the file
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.ContentUrl">
            <summary>
            Gets or sets content Url
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.Content">
            <summary>
            Gets or sets embedded content
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.Name">
            <summary>
            Gets or sets (OPTIONAL) The name of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.ThumbnailUrl">
            <summary>
            Gets or sets (OPTIONAL) Thumbnail associated with attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.Properties">
            <summary>
            Extension data for overflow of properties
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentData">
            <summary>
            Attachment data
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentData.#ctor">
            <summary>
            Initializes a new instance of the AttachmentData class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentData.#ctor(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the AttachmentData class.
            </summary>
            <param name="type">Content-Type of the attachment</param>
            <param name="name">Name of the attachment</param>
            <param name="originalBase64">Attachment content</param>
            <param name="thumbnailBase64">Attachment thumbnail</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentData.Type">
            <summary>
            Gets or sets content-Type of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentData.Name">
            <summary>
            Gets or sets name of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentData.OriginalBase64">
            <summary>
            Gets or sets attachment content
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentData.ThumbnailBase64">
            <summary>
            Gets or sets attachment thumbnail
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentInfo">
            <summary>
            Metdata for an attachment
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentInfo.#ctor">
            <summary>
            Initializes a new instance of the AttachmentInfo class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentInfo.#ctor(System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.AttachmentView})">
            <summary>
            Initializes a new instance of the AttachmentInfo class.
            </summary>
            <param name="name">Name of the attachment</param>
            <param name="type">ContentType of the attachment</param>
            <param name="views">attachment views</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentInfo.Name">
            <summary>
            Gets or sets name of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentInfo.Type">
            <summary>
            Gets or sets contentType of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentInfo.Views">
            <summary>
            Gets or sets attachment views
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentView">
            <summary>
            Attachment View name and size
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentView.#ctor">
            <summary>
            Initializes a new instance of the AttachmentView class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentView.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the AttachmentView class.
            </summary>
            <param name="viewId">Content type of the attachment</param>
            <param name="size">Name of the attachment</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentView.ViewId">
            <summary>
            Gets or sets content type of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentView.Size">
            <summary>
            Gets or sets name of the attachment
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AudioCard">
            <summary>
            Audio card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AudioCard.#ctor">
            <summary>
            Initializes a new instance of the AudioCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AudioCard.#ctor(System.String,System.String,System.String,Microsoft.Bot.Connector.ThumbnailUrl,System.Collections.Generic.IList{Microsoft.Bot.Connector.MediaUrl},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object)">
            <summary>
            Initializes a new instance of the AudioCard class.
            </summary>
            <param name="title">Title of this card</param>
            <param name="subtitle">Subtitle of this card</param>
            <param name="text">Text of this card</param>
            <param name="image">Thumbnail placeholder</param>
            <param name="media">Media URLs for this card</param>
            <param name="buttons">Actions on this card</param>
            <param name="shareable">This content may be shared with others
            (default:true)</param>
            <param name="autoloop">Should the client loop playback at end of
            content (default:true)</param>
            <param name="autostart">Should the client automatically start
            playback of media in this card (default:true)</param>
            <param name="aspect">Aspect ratio of thumbnail/media placeholder,
            allowed values are "16:9" and "4:3"</param>
            <param name="value">Supplementary parameter for this card</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Title">
            <summary>
            Gets or sets title of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Subtitle">
            <summary>
            Gets or sets subtitle of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Text">
            <summary>
            Gets or sets text of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Image">
            <summary>
            Gets or sets thumbnail placeholder
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Media">
            <summary>
            Gets or sets media URLs for this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Buttons">
            <summary>
            Gets or sets actions on this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Shareable">
            <summary>
            Gets or sets this content may be shared with others (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Autoloop">
            <summary>
            Gets or sets should the client loop playback at end of content
            (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Autostart">
            <summary>
            Gets or sets should the client automatically start playback of
            media in this card (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Aspect">
            <summary>
            Gets or sets aspect ratio of thumbnail/media placeholder, allowed
            values are "16:9" and "4:3"
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Value">
            <summary>
            Gets or sets supplementary parameter for this card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AudioCard.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.BasicCard">
            <summary>
            A basic card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BasicCard.#ctor">
            <summary>
            Initializes a new instance of the BasicCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BasicCard.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardImage},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the BasicCard class.
            </summary>
            <param name="title">Title of the card</param>
            <param name="subtitle">Subtitle of the card</param>
            <param name="text">Text for the card</param>
            <param name="images">Array of images for the card</param>
            <param name="buttons">Set of actions applicable to the current
            card</param>
            <param name="tap">This action will be activated when user taps on
            the card itself</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.BasicCard.Title">
            <summary>
            Gets or sets title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BasicCard.Subtitle">
            <summary>
            Gets or sets subtitle of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BasicCard.Text">
            <summary>
            Gets or sets text for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BasicCard.Images">
            <summary>
            Gets or sets array of images for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BasicCard.Buttons">
            <summary>
            Gets or sets set of actions applicable to the current card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BasicCard.Tap">
            <summary>
            Gets or sets this action will be activated when user taps on the
            card itself
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.CardAction">
            <summary>
            A clickable action
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.CardAction.#ctor">
            <summary>
            Initializes a new instance of the CardAction class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.CardAction.#ctor(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the CardAction class.
            </summary>
            <param name="type">The type of action implemented by this
            button</param>
            <param name="title">Text description which appears on the
            button</param>
            <param name="image">Image URL which will appear on the button, next
            to text label</param>
            <param name="text">Text for this action</param>
            <param name="displayText">(Optional) text to display in the chat
            feed if the button is clicked</param>
            <param name="value">Supplementary parameter for action. Content of
            this property depends on the ActionType</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Type">
            <summary>
            Gets or sets the type of action implemented by this button
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Title">
            <summary>
            Gets or sets text description which appears on the button
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Image">
            <summary>
            Gets or sets image URL which will appear on the button, next to
            text label
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Text">
            <summary>
            Gets or sets text for this action
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.DisplayText">
            <summary>
            Gets or sets (Optional) text to display in the chat feed if the
            button is clicked
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Value">
            <summary>
            Gets or sets supplementary parameter for action. Content of this
            property depends on the ActionType
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.CardImage">
            <summary>
            An image on a card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.CardImage.#ctor">
            <summary>
            Initializes a new instance of the CardImage class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.CardImage.#ctor(System.String,System.String,Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the CardImage class.
            </summary>
            <param name="url">URL thumbnail image for major content
            property</param>
            <param name="alt">Image description intended for screen
            readers</param>
            <param name="tap">Action assigned to specific Attachment</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardImage.Url">
            <summary>
            Gets or sets URL thumbnail image for major content property
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardImage.Alt">
            <summary>
            Gets or sets image description intended for screen readers
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardImage.Tap">
            <summary>
            Gets or sets action assigned to specific Attachment
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationAccount">
            <summary>
            Channel account information for a conversation
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationAccount.#ctor">
            <summary>
            Initializes a new instance of the ConversationAccount class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationAccount.#ctor(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Initializes a new instance of the ConversationAccount class.
            </summary>
            <param name="isGroup">Is this a reference to a group</param>
            <param name="id">Channel id for the user or bot on this channel
            (Example: joe@smith.com, or @joesmith or 123456)</param>
            <param name="name">Display friendly name</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationAccount.IsGroup">
            <summary>
            Gets or sets is this a reference to a group
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationAccount.Id">
            <summary>
            Gets or sets channel id for the user or bot on this channel
            (Example: joe@smith.com, or @joesmith or 123456)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationAccount.Name">
            <summary>
            Gets or sets display friendly name
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationAccount.Properties">
            <summary>
            Extension data for overflow of properties
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationParameters">
            <summary>
            Parameters for creating a new conversation
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationParameters.#ctor">
            <summary>
            Initializes a new instance of the ConversationParameters class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationParameters.#ctor(System.Nullable{System.Boolean},Microsoft.Bot.Connector.ChannelAccount,System.Collections.Generic.IList{Microsoft.Bot.Connector.ChannelAccount},System.String,Microsoft.Bot.Connector.Activity,System.Object)">
            <summary>
            Initializes a new instance of the ConversationParameters class.
            </summary>
            <param name="isGroup">IsGroup</param>
            <param name="bot">The bot address for this conversation</param>
            <param name="members">Members to add to the conversation</param>
            <param name="topicName">(Optional) Topic of the conversation (if
            supported by the channel)</param>
            <param name="activity">(Optional) When creating a new conversation,
            use this activity as the intial message to the conversation</param>
            <param name="channelData">Channel specific payload for creating the
            conversation</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.IsGroup">
            <summary>
            Gets or sets isGroup
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.Bot">
            <summary>
            Gets or sets the bot address for this conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.Members">
            <summary>
            Gets or sets members to add to the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.TopicName">
            <summary>
            Gets or sets (Optional) Topic of the conversation (if supported by
            the channel)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.Activity">
            <summary>
            Gets or sets (Optional) When creating a new conversation, use this
            activity as the intial message to the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.ChannelData">
            <summary>
            Gets or sets channel specific payload for creating the conversation
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationReference">
            <summary>
            An object relating to a particular point in a conversation
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationReference.#ctor">
            <summary>
            Initializes a new instance of the ConversationReference class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationReference.#ctor(System.String,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ConversationAccount,System.String,System.String)">
            <summary>
            Initializes a new instance of the ConversationReference class.
            </summary>
            <param name="activityId">(Optional) ID of the activity to refer
            to</param>
            <param name="user">(Optional) User participating in this
            conversation</param>
            <param name="bot">Bot participating in this conversation</param>
            <param name="conversation">Conversation reference</param>
            <param name="channelId">Channel ID</param>
            <param name="serviceUrl">Service endpoint where operations
            concerning the referenced conversation may be performed</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationReference.ActivityId">
            <summary>
            Gets or sets (Optional) ID of the activity to refer to
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationReference.User">
            <summary>
            Gets or sets (Optional) User participating in this conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationReference.Bot">
            <summary>
            Gets or sets bot participating in this conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationReference.Conversation">
            <summary>
            Gets or sets conversation reference
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationReference.ChannelId">
            <summary>
            Gets or sets channel ID
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationReference.ServiceUrl">
            <summary>
            Gets or sets service endpoint where operations concerning the
            referenced conversation may be performed
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationReference.GetPostToBotMessage">
            <summary>
            Creates <see cref="T:Microsoft.Bot.Connector.Activity"/> from conversation reference as it is posted to bot.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationReference.GetPostToUserMessage">
            <summary>
            Creates <see cref="T:Microsoft.Bot.Connector.Activity"/> from conversation reference that can be posted to user as reply.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationResourceResponse">
            <summary>
            A response containing a resource
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationResourceResponse.#ctor">
            <summary>
            Initializes a new instance of the ConversationResourceResponse
            class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationResourceResponse.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ConversationResourceResponse
            class.
            </summary>
            <param name="activityId">ID of the Activity (if sent)</param>
            <param name="serviceUrl">Service endpoint where operations
            concerning the conversation may be performed</param>
            <param name="id">Id of the resource</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationResourceResponse.ActivityId">
            <summary>
            Gets or sets ID of the Activity (if sent)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationResourceResponse.ServiceUrl">
            <summary>
            Gets or sets service endpoint where operations concerning the
            conversation may be performed
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationResourceResponse.Id">
            <summary>
            Gets or sets id of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Entity">
            <summary>
            Object of schema.org types
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Entity.#ctor">
            <summary>
            Initializes a new instance of the Entity class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Entity class.
            </summary>
            <param name="type">Entity Type (typically from schema.org
            types)</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Entity.Type">
            <summary>
            Gets or sets entity Type (typically from schema.org types)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Entity.Properties">
            <summary>
            Extension data for overflow of properties
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Entity.GetAs``1">
            <summary>
            Retrieve internal payload.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Entity.SetAs``1(``0)">
            <summary>
            Set internal payload.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Error">
            <summary>
            Object representing error information
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Error.#ctor">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Error.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
            <param name="code">Error code</param>
            <param name="message">Error message</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Error.Code">
            <summary>
            Gets or sets error code
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Error.Message">
            <summary>
            Gets or sets error message
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ErrorResponse">
            <summary>
            An HTTP API response
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ErrorResponse.#ctor">
            <summary>
            Initializes a new instance of the ErrorResponse class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ErrorResponse.#ctor(Microsoft.Bot.Connector.Error)">
            <summary>
            Initializes a new instance of the ErrorResponse class.
            </summary>
            <param name="error">Error message</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ErrorResponse.Error">
            <summary>
            Gets or sets error message
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ErrorResponseException">
            <summary>
            Exception thrown for an invalid response with ErrorResponse
            information.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ErrorResponseException.Request">
            <summary>
            Gets information about the associated HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ErrorResponseException.Response">
            <summary>
            Gets information about the associated HTTP response.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ErrorResponseException.Body">
            <summary>
            Gets or sets the body object.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ErrorResponseException.#ctor">
            <summary>
            Initializes a new instance of the ErrorResponseException class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ErrorResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ErrorResponseException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ErrorResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ErrorResponseException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Fact">
            <summary>
            Set of key-value pairs. Advantage of this section is that key and value
            properties will be
            rendered with default style information with some delimiter between
            them. So there is no need for developer to specify style information.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Fact.#ctor">
            <summary>
            Initializes a new instance of the Fact class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Fact.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Fact class.
            </summary>
            <param name="key">The key for this Fact</param>
            <param name="value">The value for this Fact</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Fact.Key">
            <summary>
            Gets or sets the key for this Fact
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Fact.Value">
            <summary>
            Gets or sets the value for this Fact
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.GeoCoordinates">
            <summary>
            GeoCoordinates (entity type: "https://schema.org/GeoCoordinates")
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.GeoCoordinates.#ctor">
            <summary>
            Initializes a new instance of the GeoCoordinates class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.GeoCoordinates.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Initializes a new instance of the GeoCoordinates class.
            </summary>
            <param name="elevation">Elevation of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)</param>
            <param name="latitude">Latitude of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)</param>
            <param name="longitude">Longitude of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)</param>
            <param name="type">The type of the thing</param>
            <param name="name">The name of the thing</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Elevation">
            <summary>
            Gets or sets elevation of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Latitude">
            <summary>
            Gets or sets latitude of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Longitude">
            <summary>
            Gets or sets longitude of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Type">
            <summary>
            Gets or sets the type of the thing
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Name">
            <summary>
            Gets or sets the name of the thing
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.HeroCard">
            <summary>
            A Hero card (card with a single, large image)
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.HeroCard.#ctor">
            <summary>
            Initializes a new instance of the HeroCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.HeroCard.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardImage},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the HeroCard class.
            </summary>
            <param name="title">Title of the card</param>
            <param name="subtitle">Subtitle of the card</param>
            <param name="text">Text for the card</param>
            <param name="images">Array of images for the card</param>
            <param name="buttons">Set of actions applicable to the current
            card</param>
            <param name="tap">This action will be activated when user taps on
            the card itself</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Title">
            <summary>
            Gets or sets title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Subtitle">
            <summary>
            Gets or sets subtitle of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Text">
            <summary>
            Gets or sets text for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Images">
            <summary>
            Gets or sets array of images for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Buttons">
            <summary>
            Gets or sets set of actions applicable to the current card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Tap">
            <summary>
            Gets or sets this action will be activated when user taps on the
            card itself
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.MediaCard">
            <summary>
            Media card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaCard.#ctor">
            <summary>
            Initializes a new instance of the MediaCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaCard.#ctor(System.String,System.String,System.String,Microsoft.Bot.Connector.ThumbnailUrl,System.Collections.Generic.IList{Microsoft.Bot.Connector.MediaUrl},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object)">
            <summary>
            Initializes a new instance of the MediaCard class.
            </summary>
            <param name="title">Title of this card</param>
            <param name="subtitle">Subtitle of this card</param>
            <param name="text">Text of this card</param>
            <param name="image">Thumbnail placeholder</param>
            <param name="media">Media URLs for this card</param>
            <param name="buttons">Actions on this card</param>
            <param name="shareable">This content may be shared with others
            (default:true)</param>
            <param name="autoloop">Should the client loop playback at end of
            content (default:true)</param>
            <param name="autostart">Should the client automatically start
            playback of media in this card (default:true)</param>
            <param name="aspect">Aspect ratio of thumbnail/media placeholder,
            allowed values are "16:9" and "4:3"</param>
            <param name="value">Supplementary parameter for this card</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Title">
            <summary>
            Gets or sets title of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Subtitle">
            <summary>
            Gets or sets subtitle of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Text">
            <summary>
            Gets or sets text of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Image">
            <summary>
            Gets or sets thumbnail placeholder
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Media">
            <summary>
            Gets or sets media URLs for this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Buttons">
            <summary>
            Gets or sets actions on this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Shareable">
            <summary>
            Gets or sets this content may be shared with others (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Autoloop">
            <summary>
            Gets or sets should the client loop playback at end of content
            (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Autostart">
            <summary>
            Gets or sets should the client automatically start playback of
            media in this card (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Aspect">
            <summary>
            Gets or sets aspect ratio of thumbnail/media placeholder, allowed
            values are "16:9" and "4:3"
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaCard.Value">
            <summary>
            Gets or sets supplementary parameter for this card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaCard.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.MediaEventValue">
            <summary>
            Supplementary parameter for media events
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaEventValue.#ctor">
            <summary>
            Initializes a new instance of the MediaEventValue class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaEventValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MediaEventValue class.
            </summary>
            <param name="cardValue">Callback parameter specified in the Value
            field of the MediaCard that originated this event</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaEventValue.CardValue">
            <summary>
            Gets or sets callback parameter specified in the Value field of the
            MediaCard that originated this event
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.MediaUrl">
            <summary>
            Media URL
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaUrl.#ctor">
            <summary>
            Initializes a new instance of the MediaUrl class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaUrl.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MediaUrl class.
            </summary>
            <param name="url">Url for the media</param>
            <param name="profile">Optional profile hint to the client to
            differentiate multiple MediaUrl objects from each other</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaUrl.Url">
            <summary>
            Gets or sets url for the media
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaUrl.Profile">
            <summary>
            Gets or sets optional profile hint to the client to differentiate
            multiple MediaUrl objects from each other
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaUrl.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.Mention">
            <summary>
            Mention information (entity type: "mention")
            </summary>
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Mention.#ctor">
            <summary>
            Initializes a new instance of the Mention class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Mention.#ctor(Microsoft.Bot.Connector.ChannelAccount,System.String,System.String)">
            <summary>
            Initializes a new instance of the Mention class.
            </summary>
            <param name="mentioned">The mentioned user</param>
            <param name="text">Sub Text which represents the mention (can be
            null or empty)</param>
            <param name="type">Entity Type (typically from schema.org
            types)</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Mention.Mentioned">
            <summary>
            Gets or sets the mentioned user
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Mention.Text">
            <summary>
            Gets or sets sub Text which represents the mention (can be null or
            empty)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Mention.Type">
            <summary>
            Gets or sets entity Type (typically from schema.org types)
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.MessageReaction">
            <summary>
            Message reaction object
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MessageReaction.#ctor">
            <summary>
            Initializes a new instance of the MessageReaction class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MessageReaction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MessageReaction class.
            </summary>
            <param name="type">Message reaction type</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.MessageReaction.Type">
            <summary>
            Gets or sets message reaction type
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.MicrosoftPayMethodData">
            <summary>
            W3C Payment Method Data for Microsoft Pay
            </summary>
            <summary>
            Pay method data for Microsoft Payment.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftPayMethodData.#ctor">
            <summary>
            Initializes a new instance of the MicrosoftPayMethodData class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftPayMethodData.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the MicrosoftPayMethodData class.
            </summary>
            <param name="mechantId">Microsoft Pay Merchant ID</param>
            <param name="supportedNetworks">Supported payment networks (e.g.,
            "visa" and "mastercard")</param>
            <param name="supportedTypes">Supported payment types (e.g.,
            "credit")</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.MicrosoftPayMethodData.MechantId">
            <summary>
            Gets or sets microsoft Pay Merchant ID
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MicrosoftPayMethodData.SupportedNetworks">
            <summary>
            Gets or sets supported payment networks (e.g., "visa" and
            "mastercard")
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MicrosoftPayMethodData.SupportedTypes">
            <summary>
            Gets or sets supported payment types (e.g., "credit")
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.MicrosoftPayMethodData.MethodName">
            <summary>
            The pay method name.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftPayMethodData.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the MicrosoftPayMethodData class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MicrosoftPayMethodData.Mode">
            <summary>
            Payment method mode
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftPayMethodData.ToPaymentMethodData">
            <summary>
            Get Microsoft Pay method data
            </summary>
            <returns>Payment method data</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentAddress">
            <summary>
            Address within a Payment Request
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentAddress.#ctor">
            <summary>
            Initializes a new instance of the PaymentAddress class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentAddress.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PaymentAddress class.
            </summary>
            <param name="country">This is the CLDR (Common Locale Data
            Repository) region code. For example, US, GB, CN, or JP</param>
            <param name="addressLine">This is the most specific part of the
            address. It can include, for example, a street name, a house
            number, apartment number, a rural delivery route, descriptive
            instructions, or a post office box number.</param>
            <param name="region">This is the top level administrative
            subdivision of the country. For example, this can be a state, a
            province, an oblast, or a prefecture.</param>
            <param name="city">This is the city/town portion of the
            address.</param>
            <param name="dependentLocality">This is the dependent locality or
            sublocality within a city. For example, used for neighborhoods,
            boroughs, districts, or UK dependent localities.</param>
            <param name="postalCode">This is the postal code or ZIP code, also
            known as PIN code in India.</param>
            <param name="sortingCode">This is the sorting code as used in, for
            example, France.</param>
            <param name="languageCode">This is the BCP-47 language code for the
            address. It's used to determine the field separators and the order
            of fields when formatting the address for display.</param>
            <param name="organization">This is the organization, firm, company,
            or institution at this address.</param>
            <param name="recipient">This is the name of the recipient or
            contact person.</param>
            <param name="phone">This is the phone number of the recipient or
            contact person.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.Country">
            <summary>
            Gets or sets this is the CLDR (Common Locale Data Repository)
            region code. For example, US, GB, CN, or JP
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.AddressLine">
            <summary>
            Gets or sets this is the most specific part of the address. It can
            include, for example, a street name, a house number, apartment
            number, a rural delivery route, descriptive instructions, or a post
            office box number.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.Region">
            <summary>
            Gets or sets this is the top level administrative subdivision of
            the country. For example, this can be a state, a province, an
            oblast, or a prefecture.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.City">
            <summary>
            Gets or sets this is the city/town portion of the address.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.DependentLocality">
            <summary>
            Gets or sets this is the dependent locality or sublocality within a
            city. For example, used for neighborhoods, boroughs, districts, or
            UK dependent localities.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.PostalCode">
            <summary>
            Gets or sets this is the postal code or ZIP code, also known as PIN
            code in India.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.SortingCode">
            <summary>
            Gets or sets this is the sorting code as used in, for example,
            France.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.LanguageCode">
            <summary>
            Gets or sets this is the BCP-47 language code for the address. It's
            used to determine the field separators and the order of fields when
            formatting the address for display.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.Organization">
            <summary>
            Gets or sets this is the organization, firm, company, or
            institution at this address.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.Recipient">
            <summary>
            Gets or sets this is the name of the recipient or contact person.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentAddress.Phone">
            <summary>
            Gets or sets this is the phone number of the recipient or contact
            person.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentCurrencyAmount">
            <summary>
            Supplies monetary amounts
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentCurrencyAmount.#ctor">
            <summary>
            Initializes a new instance of the PaymentCurrencyAmount class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentCurrencyAmount.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PaymentCurrencyAmount class.
            </summary>
            <param name="currency">A currency identifier</param>
            <param name="value">Decimal monetary value</param>
            <param name="currencySystem">Currency system</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentCurrencyAmount.Currency">
            <summary>
            Gets or sets a currency identifier
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentCurrencyAmount.Value">
            <summary>
            Gets or sets decimal monetary value
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentCurrencyAmount.CurrencySystem">
            <summary>
            Gets or sets currency system
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentDetails">
            <summary>
            Provides information about the requested transaction
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentDetails.#ctor">
            <summary>
            Initializes a new instance of the PaymentDetails class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentDetails.#ctor(Microsoft.Bot.Connector.PaymentItem,System.Collections.Generic.IList{Microsoft.Bot.Connector.PaymentItem},System.Collections.Generic.IList{Microsoft.Bot.Connector.PaymentShippingOption},System.Collections.Generic.IList{Microsoft.Bot.Connector.PaymentDetailsModifier},System.String)">
            <summary>
            Initializes a new instance of the PaymentDetails class.
            </summary>
            <param name="total">Contains the total amount of the payment
            request</param>
            <param name="displayItems">Contains line items for the payment
            request that the user agent may display</param>
            <param name="shippingOptions">A sequence containing the different
            shipping options for the user to choose from</param>
            <param name="modifiers">Contains modifiers for particular payment
            method identifiers</param>
            <param name="error">Error description</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetails.Total">
            <summary>
            Gets or sets contains the total amount of the payment request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetails.DisplayItems">
            <summary>
            Gets or sets contains line items for the payment request that the
            user agent may display
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetails.ShippingOptions">
            <summary>
            Gets or sets a sequence containing the different shipping options
            for the user to choose from
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetails.Modifiers">
            <summary>
            Gets or sets contains modifiers for particular payment method
            identifiers
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetails.Error">
            <summary>
            Gets or sets error description
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentDetailsModifier">
            <summary>
            Provides details that modify the PaymentDetails based on payment method
            identifier
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentDetailsModifier.#ctor">
            <summary>
            Initializes a new instance of the PaymentDetailsModifier class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentDetailsModifier.#ctor(System.Collections.Generic.IList{System.String},Microsoft.Bot.Connector.PaymentItem,System.Collections.Generic.IList{Microsoft.Bot.Connector.PaymentItem},System.Object)">
            <summary>
            Initializes a new instance of the PaymentDetailsModifier class.
            </summary>
            <param name="supportedMethods">Contains a sequence of payment
            method identifiers</param>
            <param name="total">This value overrides the total field in the
            PaymentDetails dictionary for the payment method identifiers in the
            supportedMethods field</param>
            <param name="additionalDisplayItems">Provides additional display
            items that are appended to the displayItems field in the
            PaymentDetails dictionary for the payment method identifiers in the
            supportedMethods field</param>
            <param name="data">A JSON-serializable object that provides
            optional information that might be needed by the supported payment
            methods</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetailsModifier.SupportedMethods">
            <summary>
            Gets or sets contains a sequence of payment method identifiers
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetailsModifier.Total">
            <summary>
            Gets or sets this value overrides the total field in the
            PaymentDetails dictionary for the payment method identifiers in the
            supportedMethods field
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetailsModifier.AdditionalDisplayItems">
            <summary>
            Gets or sets provides additional display items that are appended to
            the displayItems field in the PaymentDetails dictionary for the
            payment method identifiers in the supportedMethods field
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentDetailsModifier.Data">
            <summary>
            Gets or sets a JSON-serializable object that provides optional
            information that might be needed by the supported payment methods
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentItem">
            <summary>
            Indicates what the payment request is for and the value asked for
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentItem.#ctor">
            <summary>
            Initializes a new instance of the PaymentItem class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentItem.#ctor(System.String,Microsoft.Bot.Connector.PaymentCurrencyAmount,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the PaymentItem class.
            </summary>
            <param name="label">Human-readable description of the item</param>
            <param name="amount">Monetary amount for the item</param>
            <param name="pending">When set to true this flag means that the
            amount field is not final.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentItem.Label">
            <summary>
            Gets or sets human-readable description of the item
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentItem.Amount">
            <summary>
            Gets or sets monetary amount for the item
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentItem.Pending">
            <summary>
            Gets or sets when set to true this flag means that the amount field
            is not final.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentMethodData">
            <summary>
            Indicates a set of supported payment methods and any associated payment
            method specific data for those methods
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentMethodData.#ctor">
            <summary>
            Initializes a new instance of the PaymentMethodData class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentMethodData.#ctor(System.Collections.Generic.IList{System.String},System.Object)">
            <summary>
            Initializes a new instance of the PaymentMethodData class.
            </summary>
            <param name="supportedMethods">Required sequence of strings
            containing payment method identifiers for payment methods that the
            merchant web site accepts</param>
            <param name="data">A JSON-serializable object that provides
            optional information that might be needed by the supported payment
            methods</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentMethodData.SupportedMethods">
            <summary>
            Gets or sets required sequence of strings containing payment method
            identifiers for payment methods that the merchant web site accepts
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentMethodData.Data">
            <summary>
            Gets or sets a JSON-serializable object that provides optional
            information that might be needed by the supported payment methods
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentOptions">
            <summary>
            Provides information about the options desired for the payment request
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentOptions.#ctor">
            <summary>
            Initializes a new instance of the PaymentOptions class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentOptions.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the PaymentOptions class.
            </summary>
            <param name="requestPayerName">Indicates whether the user agent
            should collect and return the payer's name as part of the payment
            request</param>
            <param name="requestPayerEmail">Indicates whether the user agent
            should collect and return the payer's email address as part of the
            payment request</param>
            <param name="requestPayerPhone">Indicates whether the user agent
            should collect and return the payer's phone number as part of the
            payment request</param>
            <param name="requestShipping">Indicates whether the user agent
            should collect and return a shipping address as part of the payment
            request</param>
            <param name="shippingType">If requestShipping is set to true, then
            the shippingType field may be used to influence the way the user
            agent presents the user interface for gathering the shipping
            address</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentOptions.RequestPayerName">
            <summary>
            Gets or sets indicates whether the user agent should collect and
            return the payer's name as part of the payment request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentOptions.RequestPayerEmail">
            <summary>
            Gets or sets indicates whether the user agent should collect and
            return the payer's email address as part of the payment request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentOptions.RequestPayerPhone">
            <summary>
            Gets or sets indicates whether the user agent should collect and
            return the payer's phone number as part of the payment request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentOptions.RequestShipping">
            <summary>
            Gets or sets indicates whether the user agent should collect and
            return a shipping address as part of the payment request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentOptions.ShippingType">
            <summary>
            Gets or sets if requestShipping is set to true, then the
            shippingType field may be used to influence the way the user agent
            presents the user interface for gathering the shipping address
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentRequest">
            <summary>
            A request to make a payment
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequest.#ctor">
            <summary>
            Initializes a new instance of the PaymentRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequest.#ctor(System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.PaymentMethodData},Microsoft.Bot.Connector.PaymentDetails,Microsoft.Bot.Connector.PaymentOptions,System.String)">
            <summary>
            Initializes a new instance of the PaymentRequest class.
            </summary>
            <param name="id">ID of this payment request</param>
            <param name="methodData">Allowed payment methods for this
            request</param>
            <param name="details">Details for this request</param>
            <param name="options">Provides information about the options
            desired for the payment request</param>
            <param name="expires">Expiration for this request, in ISO 8601
            duration format (e.g., 'P1D')</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequest.Id">
            <summary>
            Gets or sets ID of this payment request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequest.MethodData">
            <summary>
            Gets or sets allowed payment methods for this request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequest.Details">
            <summary>
            Gets or sets details for this request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequest.Options">
            <summary>
            Gets or sets provides information about the options desired for the
            payment request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequest.Expires">
            <summary>
            Gets or sets expiration for this request, in ISO 8601 duration
            format (e.g., 'P1D')
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.PaymentRequest.PaymentActionType">
            <summary>
            Action type for Payment action
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.PaymentRequest.PaymentContentType">
            <summary>
            Content-type for Payment card
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentRequestComplete">
            <summary>
            Payload delivered when completing a payment request
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequestComplete.#ctor">
            <summary>
            Initializes a new instance of the PaymentRequestComplete class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequestComplete.#ctor(System.String,Microsoft.Bot.Connector.PaymentRequest,Microsoft.Bot.Connector.PaymentResponse)">
            <summary>
            Initializes a new instance of the PaymentRequestComplete class.
            </summary>
            <param name="id">Payment request ID</param>
            <param name="paymentRequest">Initial payment request</param>
            <param name="paymentResponse">Corresponding payment
            response</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestComplete.Id">
            <summary>
            Gets or sets payment request ID
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestComplete.PaymentRequest">
            <summary>
            Gets or sets initial payment request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestComplete.PaymentResponse">
            <summary>
            Gets or sets corresponding payment response
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentRequestCompleteResult">
            <summary>
            Result from a completed payment request
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequestCompleteResult.#ctor">
            <summary>
            Initializes a new instance of the PaymentRequestCompleteResult
            class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequestCompleteResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PaymentRequestCompleteResult
            class.
            </summary>
            <param name="result">Result of the payment request
            completion</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestCompleteResult.Result">
            <summary>
            Gets or sets result of the payment request completion
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentRequestUpdate">
            <summary>
            An update to a payment request
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequestUpdate.#ctor">
            <summary>
            Initializes a new instance of the PaymentRequestUpdate class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequestUpdate.#ctor(System.String,Microsoft.Bot.Connector.PaymentDetails,Microsoft.Bot.Connector.PaymentAddress,System.String)">
            <summary>
            Initializes a new instance of the PaymentRequestUpdate class.
            </summary>
            <param name="id">ID for the payment request to update</param>
            <param name="details">Update payment details</param>
            <param name="shippingAddress">Updated shipping address</param>
            <param name="shippingOption">Updated shipping options</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestUpdate.Id">
            <summary>
            Gets or sets ID for the payment request to update
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestUpdate.Details">
            <summary>
            Gets or sets update payment details
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestUpdate.ShippingAddress">
            <summary>
            Gets or sets updated shipping address
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestUpdate.ShippingOption">
            <summary>
            Gets or sets updated shipping options
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentRequestUpdateResult">
            <summary>
            A result object from a Payment Request Update invoke operation
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequestUpdateResult.#ctor">
            <summary>
            Initializes a new instance of the PaymentRequestUpdateResult class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentRequestUpdateResult.#ctor(Microsoft.Bot.Connector.PaymentDetails)">
            <summary>
            Initializes a new instance of the PaymentRequestUpdateResult class.
            </summary>
            <param name="details">Update payment details</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentRequestUpdateResult.Details">
            <summary>
            Gets or sets update payment details
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentResponse">
            <summary>
            A PaymentResponse is returned when a user has selected a payment method
            and approved a payment request
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentResponse.#ctor">
            <summary>
            Initializes a new instance of the PaymentResponse class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentResponse.#ctor(System.String,System.Object,Microsoft.Bot.Connector.PaymentAddress,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PaymentResponse class.
            </summary>
            <param name="methodName">The payment method identifier for the
            payment method that the user selected to fulfil the
            transaction</param>
            <param name="details">A JSON-serializable object that provides a
            payment method specific message used by the merchant to process the
            transaction and determine successful fund transfer</param>
            <param name="shippingAddress">If the requestShipping flag was set
            to true in the PaymentOptions passed to the PaymentRequest
            constructor, then shippingAddress will be the full and final
            shipping address chosen by the user</param>
            <param name="shippingOption">If the requestShipping flag was set to
            true in the PaymentOptions passed to the PaymentRequest
            constructor, then shippingOption will be the id attribute of the
            selected shipping option</param>
            <param name="payerEmail">If the requestPayerEmail flag was set to
            true in the PaymentOptions passed to the PaymentRequest
            constructor, then payerEmail will be the email address chosen by
            the user</param>
            <param name="payerPhone">If the requestPayerPhone flag was set to
            true in the PaymentOptions passed to the PaymentRequest
            constructor, then payerPhone will be the phone number chosen by the
            user</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentResponse.MethodName">
            <summary>
            Gets or sets the payment method identifier for the payment method
            that the user selected to fulfil the transaction
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentResponse.Details">
            <summary>
            Gets or sets a JSON-serializable object that provides a payment
            method specific message used by the merchant to process the
            transaction and determine successful fund transfer
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentResponse.ShippingAddress">
            <summary>
            Gets or sets if the requestShipping flag was set to true in the
            PaymentOptions passed to the PaymentRequest constructor, then
            shippingAddress will be the full and final shipping address chosen
            by the user
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentResponse.ShippingOption">
            <summary>
            Gets or sets if the requestShipping flag was set to true in the
            PaymentOptions passed to the PaymentRequest constructor, then
            shippingOption will be the id attribute of the selected shipping
            option
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentResponse.PayerEmail">
            <summary>
            Gets or sets if the requestPayerEmail flag was set to true in the
            PaymentOptions passed to the PaymentRequest constructor, then
            payerEmail will be the email address chosen by the user
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentResponse.PayerPhone">
            <summary>
            Gets or sets if the requestPayerPhone flag was set to true in the
            PaymentOptions passed to the PaymentRequest constructor, then
            payerPhone will be the phone number chosen by the user
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentShippingOption">
            <summary>
            Describes a shipping option
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentShippingOption.#ctor">
            <summary>
            Initializes a new instance of the PaymentShippingOption class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.PaymentShippingOption.#ctor(System.String,System.String,Microsoft.Bot.Connector.PaymentCurrencyAmount,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the PaymentShippingOption class.
            </summary>
            <param name="id">String identifier used to reference this
            PaymentShippingOption</param>
            <param name="label">Human-readable description of the item</param>
            <param name="amount">Contains the monetary amount for the
            item</param>
            <param name="selected">Indicates whether this is the default
            selected PaymentShippingOption</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentShippingOption.Id">
            <summary>
            Gets or sets string identifier used to reference this
            PaymentShippingOption
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentShippingOption.Label">
            <summary>
            Gets or sets human-readable description of the item
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentShippingOption.Amount">
            <summary>
            Gets or sets contains the monetary amount for the item
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.PaymentShippingOption.Selected">
            <summary>
            Gets or sets indicates whether this is the default selected
            PaymentShippingOption
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Place">
            <summary>
            Place (entity type: "https://schema.org/Place")
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Place.#ctor">
            <summary>
            Initializes a new instance of the Place class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Place.#ctor(System.Object,System.Object,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the Place class.
            </summary>
            <param name="address">Address of the place (may be `string` or
            complex object of type `PostalAddress`)</param>
            <param name="geo">Geo coordinates of the place (may be complex
            object of type `GeoCoordinates` or `GeoShape`)</param>
            <param name="hasMap">Map to the place (may be `string` (URL) or
            complex object of type `Map`)</param>
            <param name="type">The type of the thing</param>
            <param name="name">The name of the thing</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.Address">
            <summary>
            Gets or sets address of the place (may be `string` or complex
            object of type `PostalAddress`)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.Geo">
            <summary>
            Gets or sets geo coordinates of the place (may be complex object of
            type `GeoCoordinates` or `GeoShape`)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.HasMap">
            <summary>
            Gets or sets map to the place (may be `string` (URL) or complex
            object of type `Map`)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.Type">
            <summary>
            Gets or sets the type of the thing
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.Name">
            <summary>
            Gets or sets the name of the thing
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ReceiptCard">
            <summary>
            A receipt card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ReceiptCard.#ctor">
            <summary>
            Initializes a new instance of the ReceiptCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ReceiptCard.#ctor(System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.ReceiptItem},System.Collections.Generic.IList{Microsoft.Bot.Connector.Fact},Microsoft.Bot.Connector.CardAction,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction})">
            <summary>
            Initializes a new instance of the ReceiptCard class.
            </summary>
            <param name="title">Title of the card</param>
            <param name="items">Array of Receipt Items</param>
            <param name="facts">Array of Fact Objects   Array of key-value
            pairs.</param>
            <param name="tap">This action will be activated when user taps on
            the card</param>
            <param name="total">Total amount of money paid (or should be
            paid)</param>
            <param name="tax">Total amount of TAX paid(or should be
            paid)</param>
            <param name="vat">Total amount of VAT paid(or should be
            paid)</param>
            <param name="buttons">Set of actions applicable to the current
            card</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Title">
            <summary>
            Gets or sets title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Items">
            <summary>
            Gets or sets array of Receipt Items
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Facts">
            <summary>
            Gets or sets array of Fact Objects   Array of key-value pairs.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Tap">
            <summary>
            Gets or sets this action will be activated when user taps on the
            card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Total">
            <summary>
            Gets or sets total amount of money paid (or should be paid)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Tax">
            <summary>
            Gets or sets total amount of TAX paid(or should be paid)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Vat">
            <summary>
            Gets or sets total amount of VAT paid(or should be paid)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Buttons">
            <summary>
            Gets or sets set of actions applicable to the current card
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ReceiptItem">
            <summary>
            An item on a receipt card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ReceiptItem.#ctor">
            <summary>
            Initializes a new instance of the ReceiptItem class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ReceiptItem.#ctor(System.String,System.String,System.String,Microsoft.Bot.Connector.CardImage,System.String,System.String,Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the ReceiptItem class.
            </summary>
            <param name="title">Title of the Card</param>
            <param name="subtitle">Subtitle appears just below Title field,
            differs from Title in font styling only</param>
            <param name="text">Text field appears just below subtitle, differs
            from Subtitle in font styling only</param>
            <param name="image">Image</param>
            <param name="price">Amount with currency</param>
            <param name="quantity">Number of items of given kind</param>
            <param name="tap">This action will be activated when user taps on
            the Item bubble.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Title">
            <summary>
            Gets or sets title of the Card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Subtitle">
            <summary>
            Gets or sets subtitle appears just below Title field, differs from
            Title in font styling only
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Text">
            <summary>
            Gets or sets text field appears just below subtitle, differs from
            Subtitle in font styling only
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Image">
            <summary>
            Gets or sets image
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Price">
            <summary>
            Gets or sets amount with currency
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Quantity">
            <summary>
            Gets or sets number of items of given kind
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Tap">
            <summary>
            Gets or sets this action will be activated when user taps on the
            Item bubble.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ResourceResponse">
            <summary>
            A response containing a resource ID
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ResourceResponse.#ctor">
            <summary>
            Initializes a new instance of the ResourceResponse class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ResourceResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResourceResponse class.
            </summary>
            <param name="id">Id of the resource</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ResourceResponse.Id">
            <summary>
            Gets or sets id of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.SigninCard">
            <summary>
            A card representing a request to sign in
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.SigninCard.#ctor">
            <summary>
            Initializes a new instance of the SigninCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.SigninCard.#ctor(System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction})">
            <summary>
            Initializes a new instance of the SigninCard class.
            </summary>
            <param name="text">Text for signin request</param>
            <param name="buttons">Action to use to perform signin</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.SigninCard.Text">
            <summary>
            Gets or sets text for signin request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.SigninCard.Buttons">
            <summary>
            Gets or sets action to use to perform signin
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.SigninCard.Create(System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Bot.Connector.SigninCard"/>
            </summary>
            <param name="text"> The <see cref="P:Microsoft.Bot.Connector.SigninCard.Text"/></param>
            <param name="buttonLabel"> The signin button label.</param>
            <param name="url"> The sigin url.</param>
            <returns> The created sigin card.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.SuggestedActions">
            <summary>
            SuggestedActions that can be performed
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.SuggestedActions.#ctor">
            <summary>
            Initializes a new instance of the SuggestedActions class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.SuggestedActions.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction})">
            <summary>
            Initializes a new instance of the SuggestedActions class.
            </summary>
            <param name="to">Ids of the recipients that the actions should be
            shown to.  These Ids are relative to the channelId and a subset of
            all recipients of the activity</param>
            <param name="actions">Actions that can be shown to the user</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.SuggestedActions.To">
            <summary>
            Gets or sets ids of the recipients that the actions should be shown
            to.  These Ids are relative to the channelId and a subset of all
            recipients of the activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.SuggestedActions.Actions">
            <summary>
            Gets or sets actions that can be shown to the user
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.TextHighlight.#ctor">
            <summary>
            Initializes a new instance of the TextHighlight class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.TextHighlight.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the TextHighlight class.
            </summary>
            <param name="text">plain text fragment to highlight</param>
            <param name="occurence">index of occurence of the Text (Starting at
            1)</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.TextHighlight.Text">
            <summary>
            Gets or sets plain text fragment to highlight
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.TextHighlight.Occurence">
            <summary>
            Gets or sets index of occurence of the Text (Starting at 1)
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Thing">
            <summary>
            Thing (entity type: "https://schema.org/Thing")
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Thing.#ctor">
            <summary>
            Initializes a new instance of the Thing class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Thing.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Thing class.
            </summary>
            <param name="type">The type of the thing</param>
            <param name="name">The name of the thing</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Thing.Type">
            <summary>
            Gets or sets the type of the thing
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Thing.Name">
            <summary>
            Gets or sets the name of the thing
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ThumbnailCard">
            <summary>
            A thumbnail card (card with a single, small thumbnail image)
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailCard.#ctor">
            <summary>
            Initializes a new instance of the ThumbnailCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailCard.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardImage},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the ThumbnailCard class.
            </summary>
            <param name="title">Title of the card</param>
            <param name="subtitle">Subtitle of the card</param>
            <param name="text">Text for the card</param>
            <param name="images">Array of images for the card</param>
            <param name="buttons">Set of actions applicable to the current
            card</param>
            <param name="tap">This action will be activated when user taps on
            the card itself</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Title">
            <summary>
            Gets or sets title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Subtitle">
            <summary>
            Gets or sets subtitle of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Text">
            <summary>
            Gets or sets text for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Images">
            <summary>
            Gets or sets array of images for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Buttons">
            <summary>
            Gets or sets set of actions applicable to the current card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Tap">
            <summary>
            Gets or sets this action will be activated when user taps on the
            card itself
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ThumbnailUrl">
            <summary>
            Thumbnail URL
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailUrl.#ctor">
            <summary>
            Initializes a new instance of the ThumbnailUrl class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailUrl.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ThumbnailUrl class.
            </summary>
            <param name="url">URL pointing to the thumbnail to use for media
            content</param>
            <param name="alt">HTML alt text to include on this thumbnail
            image</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailUrl.Url">
            <summary>
            Gets or sets URL pointing to the thumbnail to use for media content
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailUrl.Alt">
            <summary>
            Gets or sets HTML alt text to include on this thumbnail image
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailUrl.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.VideoCard">
            <summary>
            Video card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.VideoCard.#ctor">
            <summary>
            Initializes a new instance of the VideoCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.VideoCard.#ctor(System.String,System.String,System.String,Microsoft.Bot.Connector.ThumbnailUrl,System.Collections.Generic.IList{Microsoft.Bot.Connector.MediaUrl},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object)">
            <summary>
            Initializes a new instance of the VideoCard class.
            </summary>
            <param name="title">Title of this card</param>
            <param name="subtitle">Subtitle of this card</param>
            <param name="text">Text of this card</param>
            <param name="image">Thumbnail placeholder</param>
            <param name="media">Media URLs for this card</param>
            <param name="buttons">Actions on this card</param>
            <param name="shareable">This content may be shared with others
            (default:true)</param>
            <param name="autoloop">Should the client loop playback at end of
            content (default:true)</param>
            <param name="autostart">Should the client automatically start
            playback of media in this card (default:true)</param>
            <param name="aspect">Aspect ratio of thumbnail/media placeholder,
            allowed values are "16:9" and "4:3"</param>
            <param name="value">Supplementary parameter for this card</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Title">
            <summary>
            Gets or sets title of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Subtitle">
            <summary>
            Gets or sets subtitle of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Text">
            <summary>
            Gets or sets text of this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Image">
            <summary>
            Gets or sets thumbnail placeholder
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Media">
            <summary>
            Gets or sets media URLs for this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Buttons">
            <summary>
            Gets or sets actions on this card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Shareable">
            <summary>
            Gets or sets this content may be shared with others (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Autoloop">
            <summary>
            Gets or sets should the client loop playback at end of content
            (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Autostart">
            <summary>
            Gets or sets should the client automatically start playback of
            media in this card (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Aspect">
            <summary>
            Gets or sets aspect ratio of thumbnail/media placeholder, allowed
            values are "16:9" and "4:3"
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Value">
            <summary>
            Gets or sets supplementary parameter for this card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.VideoCard.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="F:Microsoft.Bot.Connector.ContactRelationUpdateActionTypes.Add">
            <summary>
            Bot added to user contacts
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ContactRelationUpdateActionTypes.Remove">
            <summary>
            Bot removed from user contacts
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ICredentialProvider.IsValidAppIdAsync(System.String)">
            <summary>
            Validate AppId
            </summary>
            <param name="appId"></param>
            <returns>true if it is a valid AppId for the controller</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ICredentialProvider.GetAppPasswordAsync(System.String)">
            <summary>
            Get the app password for a given bot appId, if it is not a valid appId, return Null
            </summary>
            <param name="appId">bot appid</param>
            <returns>password or null for invalid appid</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ICredentialProvider.IsAuthenticationDisabledAsync">
            <summary>
            Checks if bot authentication is disabled.
            </summary>
            <returns>true if bot authentication is disabled.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.StaticCredentialProvider">
            <summary>
            Static credential provider which has the appid and password static
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.SettingsCredentialProvider">
            <summary>
            Credential provider which uses config settings to lookup appId and password
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.EndOfConversationCodes">
            <summary>
            Codes indicating why a conversation has ended
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.EndOfConversationCodes.Unknown">
            <summary>
            The conversation was ended for unknown reasons
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.EndOfConversationCodes.CompletedSuccessfully">
            <summary>
            The conversation completed successfully
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.EndOfConversationCodes.UserCancelled">
            <summary>
            The user cancelled the conversation
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.EndOfConversationCodes.BotTimedOut">
            <summary>
            The conversation was ended because requests sent to the bot timed out
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.EndOfConversationCodes.BotIssuedInvalidMessage">
            <summary>
            The conversation was ended because the bot sent an invalid message
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.EndOfConversationCodes.ChannelFailed">
            <summary>
            The conversation ended because the channel experienced an internal failure
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ErrorCodes">
            <summary>
            Error codes to communicate when throwing an APIException
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.ServiceError">
            <summary>
            Other error, not specified
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.BadArgument">
            <summary>
            Bad argument
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.BadSyntax">
            <summary>
            Error parsing request
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.MissingProperty">
            <summary>
            Mandatory property was not specified
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.MessageSizeTooBig">
            <summary>
            Message exceeded size limits
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.HttpClientEx.AddAPIAuthorization(System.Net.Http.HttpClient,System.String,System.String)">
            <summary>
            add Bearer authorization token for making API calls
            </summary>
            <param name="client">The http client</param>
            <param name="appId">(default)Setting["microsoftAppId"]</param>
            <param name="password">(default)Setting["microsoftAppPassword"]</param>
            <returns>HttpClient with Bearer Authorization header</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.IActivity">
            <summary>
            Shared properties for all activities
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Type">
            <summary>
            Activity type
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Id">
            <summary>
            ID for the activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.ServiceUrl">
            <summary>
            Service URL where responses to this activity should be sent
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Timestamp">
            <summary>
            Timestamp when this message was sent (UTC)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.LocalTimestamp">
            <summary>
            Client time when message was sent (local time or UTC)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.ChannelId">
            <summary>
            Channel this activity is associated with
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.From">
            <summary>
            Sender address
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Conversation">
            <summary>
            Address for the conversation that this activity is associated with
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Recipient">
            <summary>
            Address that received the message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.ReplyToId">
            <summary>
            The original ID this activity is a response to
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Entities">
            <summary>
            Collection of Entity objects, each of which contains metadata about this activity. Each Entity object is typed.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.ChannelData">
            <summary>
            Channel-specific payload
            </summary>
            <remarks>
            Some channels will provide channel specific data.
            
            For a message originating in the channel it might provide the original native schema object for the channel. 
            
            For a message coming into the channel it might accept a payload allowing you to create a "native" response for the channel.
            
            Example:
            * Email - The Email Channel will put the original Email metadata into the ChannelData object for outgoing messages, and will accept
            on incoming message a Subject property, and a HtmlBody which can contain Html.  
            
            The channel data essentially allows a bot to have access to native functionality on a per channel basis.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Bot.Connector.IActivity.GetChannelData``1" -->
        <member name="M:Microsoft.Bot.Connector.IActivity.TryGetChannelData``1(``0@)">
            <summary>
            Try to get the channeldata as a strongly typed object 
            </summary>
            <typeparam name="TypeT"></typeparam>
            <param name="instance"></param>
            <returns>false if there is no valid channeldata available</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsMessageActivity">
            <summary>
            Return IMessageActivity if this is a message activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsContactRelationUpdateActivity">
            <summary>
            Return IContactRelationUpdateActivity if this is a contactRelationUpdate activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsInstallationUpdateActivity">
            <summary>
            Return IInstallationUpdateActivity if this is a installationUpdate activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsConversationUpdateActivity">
            <summary>
            Return IConversationUpdateActivity if this is a conversationUpdate activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsTypingActivity">
            <summary>
            Return ITypingActivity if this is a typing activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsEndOfConversationActivity">
            <summary>
            Return IEndOfConversationActivity if this is an end-of-conversation activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsEventActivity">
            <summary>
            Returns IEventActivity if this is an event activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsInvokeActivity">
            <summary>
            Returns IInvokeActivity if this is an invoke activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsMessageUpdateActivity">
            <summary>
            Returns IMessageUpdateActivity if this is a message update activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsMessageDeleteActivity">
            <summary>
            Returns IMessageDeleteActivity if this is a message delete activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsMessageReactionActivity">
            <summary>
            Returns IMessageDeleteActivity if this is a message delete activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsSuggestionActivity">
            <summary>
            Returns IMessageDeleteActivity if this is a message delete activity, null otherwise
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IContactRelationUpdateActivity">
            <summary>
            A user has added a bot to their contact list, removed the bot from their contact list, or otherwise changed the relationship between user and bot
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IContactRelationUpdateActivity.Action">
            <summary>
            add|remove
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConversationUpdateActivity">
            <summary>
            The referenced conversation has been updated
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConversationUpdateActivity.MembersAdded">
            <summary>
            Members added to the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConversationUpdateActivity.MembersRemoved">
            <summary>
            Members removed from the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConversationUpdateActivity.TopicName">
            <summary>
            The conversation's updated topic name
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConversationUpdateActivity.HistoryDisclosed">
            <summary>
            True if prior history of the channel is disclosed
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IEndOfConversationActivity">
            <summary>
            Conversation is ending, or a request to end the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IEndOfConversationActivity.Code">
            <summary>
            Code indicating why the conversation has ended
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IEndOfConversationActivity.Text">
            <summary>
            Content to display when ending the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IEndOfConversationActivity.Entities">
            <summary>
            Collection of Entity objects, each of which contains metadata about this activity. Each Entity object is typed.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IEventActivity">
            <summary>
            Asynchronous external event
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IEventActivity.Name">
            <summary>
            Name of the event
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IEventActivity.Value">
            <summary>
            Open-ended value 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IEventActivity.RelatesTo">
            <summary>
            Reference to another conversation or activity
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IInstallationUpdateActivity">
            <summary>
            A bot was installed or removed from a channel
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IInstallationUpdateActivity.Action">
            <summary>
            add|remove
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IInvokeActivity">
            <summary>
            Synchronous request to invoke an operation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IInvokeActivity.Name">
            <summary>
            Name of the operation to invoke
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IInvokeActivity.Value">
            <summary>
            Open-ended value 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IInvokeActivity.RelatesTo">
            <summary>
            Reference to another conversation or activity
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IMessageActivity">
            <summary>
            A message in a conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Locale">
            <summary>
            The language code of the Text field
            </summary>
            <remarks>
            See https://msdn.microsoft.com/en-us/library/hh456380.aspx for a list of valid language codes
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Text">
            <summary>
            Content for the message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Speak">
            <summary>
            Speak tag (SSML markup for text to speech)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.InputHint">
            <summary>
            Indicates whether the bot is accepting, expecting, or ignoring input
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Summary">
            <summary>
            Text to display if the channel cannot render cards
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.TextFormat">
            <summary>
            Format of text fields [plain|markdown] Default:markdown
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.AttachmentLayout">
            <summary>
            Hint for how to deal with multiple attachments: [list|carousel] Default:list
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Attachments">
            <summary>
            Attachments
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.SuggestedActions">
            <summary>
            SuggestedActions are used to express actions for interacting with a card like keyboards/quickReplies
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Importance">
            <summary>
            Importance of the activity 
            Valid values are "low", "normal", and "high". Default value is "normal."
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.DeliveryMode">
            <summary>
            Hint to describe how this activity should be delivered.  
            null or "default" = default delivery
            "notification" = notification semantics
            See DeliveryModes for current constants
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Expiration">
            <summary>
            DateTime to expire the activity as ISO 8601 encoded datetime
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IMessageActivity.GetMentions">
            <summary>
            Get mentions
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Value">
            <summary>
            Value provided with CardAction
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IMessageActivity.HasContent">
            <summary>
            True if this activity has text, attachments, or channelData
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IMessageDeleteActivity">
            <summary>
            Indicates a delete of an existing Message Activity
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IMessageReactionActivity">
            <summary>
            A reaction to a Message Activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageReactionActivity.ReactionsAdded">
            <summary>
            Reactions added to the activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageReactionActivity.ReactionsRemoved">
            <summary>
            Reactions removed from the activity
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IMessageUpdateActivity">
            <summary>
            An update to an existing Message Activity
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ActivityImportance">
            <summary>
            Defines the importance of an Activity
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityImportance.Low">
            <summary>
            Low importance.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityImportance.Normal">
            <summary>
            Normal importance.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityImportance.High">
            <summary>
            High importance.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.InputHints">
            <summary>
            Indicates whether the bot is accepting, expecting, or ignoring input
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.InputHints.AcceptingInput">
            <summary> 
            The sender is passively ready for input but is not waiting on a response.
            </summary> 
        </member>
        <member name="F:Microsoft.Bot.Connector.InputHints.IgnoringInput">
            <summary>
            The sender is ignoring input. Bots may send this hint if they are actively processing a request and will ignore input
            from users until the request is complete.
            </summary> 
        </member>
        <member name="F:Microsoft.Bot.Connector.InputHints.ExpectingInput">
            <summary>
            The sender is actively expecting a response from the user.
            </summary> 
        </member>
        <member name="T:Microsoft.Bot.Connector.ISuggestionActivity">
            <summary>
            SuggestionActivity (Type="suggestion")
            </summary>
            <remarks>
            A suggestion is a private message for the Recipient which can offer a suggestion activity for an activity by ReplyToId property
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.ISuggestionActivity.TextHighlights">
            <summary>
            TextHighlight in the activity represented in the ReplyToId property
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ITypingActivity">
            <summary>
            The From address is typing
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.JwtConfig">
            <summary>
            Configuration for JWT tokens
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToChannelFromBotLoginUrl">
            <summary>
            TO CHANNEL FROM BOT: Login URL
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToChannelFromBotOAuthScope">
            <summary>
            TO CHANNEL FROM BOT: OAuth scope to request
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromChannelOpenIdMetadataUrl">
            <summary>
            TO BOT FROM CHANNEL: OpenID metadata document for tokens coming from MSA
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromChannelTokenValidationParameters">
            <summary>
            TO BOT FROM CHANNEL: Token validation parameters when connecting to a bot
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromChannelAllowedSigningAlgorithms">
            <summary>
            TO BOT FROM CHANNEL: Allowed token signing algorithms
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromEmulatorOpenIdMetadataUrl">
            <summary>
            TO BOT FROM EMULATOR: OpenID metadata document for tokens coming from MSA
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromEmulatorTokenValidationParameters">
            <summary>
            TO BOT FROM EMULATOR: Token validation parameters when connecting to a channel
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.JwtTokenExtractor.EndorsementsValidator">
            <summary>
            The endorsements validator delegate.
            </summary>
            <param name="endorsements"> The endorsements used for validation.</param>
            <returns>true if validation passes; false otherwise.</returns>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._openIdMetadataCache">
            <summary>
            Cache for OpenIdConnect configuration managers (one per metadata URL)
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._endorsementsCache">
            <summary>
            Cache for Endorsement configuration managers (one per metadata URL)
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._tokenValidationParameters">
            <summary>
            Token validation parameters for this instance
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._openIdMetadata">
            <summary>
            OpenIdConnect configuration manager for this instance
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._endorsementsData">
            <summary>
            Endorsements configuration manager for this instance
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._allowedSigningAlgorithms">
            <summary>
            Allowed signing algorithms
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._validator">
            <summary>
            Delegate for validating endorsements extracted from JwtToken
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.CustomRedirectHandler">
            <summary>
            A custom redirect handler for <see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb"/>.
            </summary>
            <remarks>
            This makes sure that authorization headers stay intact between 307 redirects.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.MessageReactionTypes">
            <summary>
            Message reaction types
            </summary>
            <remarks>
            Message reactions are an open set. This class contains some common values.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Connector.MessageReactionTypes.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.MessageReactionTypes.PlusOne">
            <summary>
            +1
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.MicrosoftAppCredentials.MicrosoftAppIdKey">
            <summary>
            The key for Microsoft app Id.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.MicrosoftAppCredentials.MicrosoftAppPasswordKey">
            <summary>
            The key for Microsoft app Password.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftAppCredentials.TrustServiceUrl(System.String,System.DateTime)">
            <summary>
            Adds the host of service url to <see cref="T:Microsoft.Bot.Connector.MicrosoftAppCredentials"/> trusted hosts.
            </summary>
            <param name="serviceUrl">The service url</param>
            <param name="expirationTime">The expiration time after which this service url is not trusted anymore</param>
            <remarks>If expiration time is not provided, the expiration time will DateTime.UtcNow.AddDays(1).</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftAppCredentials.IsTrustedServiceUrl(System.String)">
            <summary>
            Checks if the service url is for a trusted host or not.
            </summary>
            <param name="serviceUrl">The service url</param>
            <returns>True if the host of the service url is trusted; False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftAppCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Apply the credentials to the HTTP request.
            </summary>
            <param name="request">The HTTP request.</param><param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentOperations">
            <summary>
            Names for invocable operations in the payment callback protocol
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.PaymentOperations.UpdateShippingAddressOperationName">
            <summary>
            Name for the Update Shipping Address operation invocation
            </summary>
            <remarks>
            This operation accepts a PaymentRequestUpdate object and returns a PaymentDetails object or an error
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Connector.PaymentOperations.UpdateShippingOptionOperationName">
            <summary>
            Name for the Update Shipping Option operation invocation
            </summary>
            <remarks>
            This operation accepts a PaymentRequestUpdate object and returns a PaymentDetails object or an error
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Connector.PaymentOperations.PaymentCompleteOperationName">
            <summary>
            Name for the payment completion operation invocation
            </summary>
            <remarks>
            This operation accepts a PaymentRequestComplete object and returns a PaymentRequestResult object or an error
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.PaymentShippingTypes">
            <summary>
            Different shipping types. See http://www.w3.org/TR/payment-request/#dom-paymentoptions-shippingtype for more information.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.PaymentShippingTypes.Shipping">
            <summary>
            This is the default and refers to the address being collected as the destination for shipping.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.PaymentShippingTypes.Delivery">
            <summary>
            This refers to the address being collected as being used for delivery. This is commonly faster than shipping. For example, it might be used for food delivery.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.PaymentShippingTypes.PickUp">
            <summary>
            This refers to the address being collected as part of a service pickup. For example, this could be the address for laundry pickup.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.BotState">
            <summary>
            BotState operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.#ctor(Microsoft.Bot.Connector.StateClient)">
            <summary>
            Initializes a new instance of the BotState class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotState.Client">
            <summary>
            Gets a reference to the StateClient
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.GetUserDataWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetUserData
            </summary>
            <remarks>
            Get a bots data for the user across all conversations
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.SetUserDataWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetUserData
            </summary>
            <remarks>
            Update the bot's data for a user
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.DeleteStateForUserWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            DeleteStateForUser
            </summary>
            <remarks>
            Delete all data for a user in a channel (UserData and
            PrivateConversationData)
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.GetConversationDataWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetConversationData
            </summary>
            <remarks>
            get the bots data for all users in a conversation
            </remarks>
            <param name='channelId'>
            the channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.SetConversationDataWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetConversationData
            </summary>
            <remarks>
            Update the bot's data for all users in a conversation
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.GetPrivateConversationDataWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetPrivateConversationData
            </summary>
            <remarks>
            get bot's data for a single user in a conversation
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.SetPrivateConversationDataWithHttpMessagesAsync(System.String,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetPrivateConversationData
            </summary>
            <remarks>
            Update the bot's data for a single user in a conversation
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Bot.Connector.BotStateExtensions">
            <summary>
            Extension methods for BotState.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetUserData(Microsoft.Bot.Connector.IBotState,System.String,System.String)">
            <summary>
            GetUserData
            </summary>
            <remarks>
            Get a bots data for the user across all conversations
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetUserDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetUserData
            </summary>
            <remarks>
            Get a bots data for the user across all conversations
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetUserData(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData)">
            <summary>
            SetUserData
            </summary>
            <remarks>
            Update the bot's data for a user
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetUserDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)">
            <summary>
            SetUserData
            </summary>
            <remarks>
            Update the bot's data for a user
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUser(Microsoft.Bot.Connector.IBotState,System.String,System.String)">
            <summary>
            DeleteStateForUser
            </summary>
            <remarks>
            Delete all data for a user in a channel (UserData and
            PrivateConversationData)
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUserAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            DeleteStateForUser
            </summary>
            <remarks>
            Delete all data for a user in a channel (UserData and
            PrivateConversationData)
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String)">
            <summary>
            GetConversationData
            </summary>
            <remarks>
            get the bots data for all users in a conversation
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            the channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetConversationData
            </summary>
            <remarks>
            get the bots data for all users in a conversation
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            the channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData)">
            <summary>
            SetConversationData
            </summary>
            <remarks>
            Update the bot's data for all users in a conversation
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)">
            <summary>
            SetConversationData
            </summary>
            <remarks>
            Update the bot's data for all users in a conversation
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String)">
            <summary>
            GetPrivateConversationData
            </summary>
            <remarks>
            get bot's data for a single user in a conversation
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetPrivateConversationData
            </summary>
            <remarks>
            get bot's data for a single user in a conversation
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,Microsoft.Bot.Connector.BotData)">
            <summary>
            SetPrivateConversationData
            </summary>
            <remarks>
            Update the bot's data for a single user in a conversation
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)">
            <summary>
            SetPrivateConversationData
            </summary>
            <remarks>
            Update the bot's data for a single user in a conversation
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.IBotState">
            <summary>
            BotState operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.GetUserDataWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetUserData
            </summary>
            <remarks>
            Get a bots data for the user across all conversations
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.SetUserDataWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetUserData
            </summary>
            <remarks>
            Update the bot's data for a user
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.DeleteStateForUserWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            DeleteStateForUser
            </summary>
            <remarks>
            Delete all data for a user in a channel (UserData and
            PrivateConversationData)
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.GetConversationDataWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetConversationData
            </summary>
            <remarks>
            get the bots data for all users in a conversation
            </remarks>
            <param name='channelId'>
            the channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.SetConversationDataWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetConversationData
            </summary>
            <remarks>
            Update the bot's data for all users in a conversation
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.GetPrivateConversationDataWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetPrivateConversationData
            </summary>
            <remarks>
            get bot's data for a single user in a conversation
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.SetPrivateConversationDataWithHttpMessagesAsync(System.String,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetPrivateConversationData
            </summary>
            <remarks>
            Update the bot's data for a single user in a conversation
            </remarks>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Connector.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.IStateClient">
             <summary>
             The Bot State REST API allows your bot to store and retrieve state
             associated with conversations conducted through
             the [Bot Connector REST API](/en-us/restapi/connector). The Bot State
             REST API uses REST and HTTPS to send and receive
             encoded content that your bot controls.
            
             Client libraries for this REST API are available. See below for a list.
            
             Your bot may store data for a user, a conversation, or a single user
             within a conversation (called "private" data).
             Each payload may be up to 32 kilobytes in size. The data may be removed
             by the bot or upon a user's request, e.g.
             if the user requests the channel to inform the bot (and therefore, the
             Bot Framework) to delete the user's data.
            
             The Bot State REST API is only useful in conjunction with the Bot
             Connector REST API.
            
             Authentication for both the Bot State and Bot Connector REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](/en-us/restapi/authentication) document.
            
             Currently, clients calling the Bot State REST API must send their
             requests to the ```state.botframework.com```
             host. Channel services do not currently implement the Bot State REST
             API.
            
             Requests to update bot state include an ```eTag``` property within the
             JSON payload. You may use the ```eTag```
             for optimistic concurrency control. If you include an ```eTag``` value
             equivalent to the ```eTag``` you saw
             in a prior object, the Bot State REST API will fail the request with an
             HTTP 409 or 412 error, on update or create,
             respectively. If you wish to overwrite whatever data is in the Bot
             State service, set ```eTag``` to ```*```.
            
             # Client Libraries for the Bot State REST API
            
             * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for Node.js](/en-us/node/builder/overview/)
             * Generate your own from the [State API Swagger
             file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/StateAPI.json)
            
             © 2016 Microsoft
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client
            subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.BotState">
            <summary>
            Gets the IBotState.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.APIResponse.#ctor">
            <summary>
            Initializes a new instance of the APIResponse class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.APIResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the APIResponse class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.APIResponse.Message">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.StateClient">
             <summary>
             The Bot State REST API allows your bot to store and retrieve state
             associated with conversations conducted through
             the [Bot Connector REST API](/en-us/restapi/connector). The Bot State
             REST API uses REST and HTTPS to send and receive
             encoded content that your bot controls.
            
             Client libraries for this REST API are available. See below for a list.
            
             Your bot may store data for a user, a conversation, or a single user
             within a conversation (called "private" data).
             Each payload may be up to 32 kilobytes in size. The data may be removed
             by the bot or upon a user's request, e.g.
             if the user requests the channel to inform the bot (and therefore, the
             Bot Framework) to delete the user's data.
            
             The Bot State REST API is only useful in conjunction with the Bot
             Connector REST API.
            
             Authentication for both the Bot State and Bot Connector REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](/en-us/restapi/authentication) document.
            
             Currently, clients calling the Bot State REST API must send their
             requests to the ```state.botframework.com```
             host. Channel services do not currently implement the Bot State REST
             API.
            
             Requests to update bot state include an ```eTag``` property within the
             JSON payload. You may use the ```eTag```
             for optimistic concurrency control. If you include an ```eTag``` value
             equivalent to the ```eTag``` you saw
             in a prior object, the Bot State REST API will fail the request with an
             HTTP 409 or 412 error, on update or create,
             respectively. If you wish to overwrite whatever data is in the Bot
             State service, set ```eTag``` to ```*```.
            
             # Client Libraries for the Bot State REST API
            
             * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for Node.js](/en-us/node/builder/overview/)
             * Generate your own from the [State API Swagger
             file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/StateAPI.json)
            
             © 2016 Microsoft
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.BotState">
            <summary>
            Gets the IBotState.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,System.String,System.String,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class
            </summary>
            <param name="baseUri">Base URI for the State service</param>
            <param name="microsoftAppId">Optional. Your Microsoft app id. If null, this setting is read from settings["MicrosoftAppId"]</param>
            <param name="microsoftAppPassword">Optional. Your Microsoft app password. If null, this setting is read from settings["MicrosoftAppPassword"]</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class
            </summary>
            <param name="baseUri">Base URI for the State service</param>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="addJwtTokenRefresher">True, if JwtTokenRefresher should be included; False otherwise.</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,Microsoft.Bot.Connector.ICredentialProvider,System.Security.Claims.ClaimsIdentity,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class using Credential source
            </summary>
            <param name="baseUri">Base URI for the State service</param>
            <param name="credentialProvider">Credential source to use</param>
            <param name="claimsIdentity">ClaimsIDentity to create the client for</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(Microsoft.Bot.Connector.ICredentialProvider,System.Security.Claims.ClaimsIdentity,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class using Credential source
            </summary>
            <param name="credentialProvider">Credential source to use</param>
            <param name="claimsIdentity">ClaimsIDentity to create the client for</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(Microsoft.Bot.Connector.MicrosoftAppCredentials,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class
            </summary>
            <remarks> This constructor will use https://state.botframework.com as the baseUri</remarks>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="addJwtTokenRefresher">True, if JwtTokenRefresher should be included; False otherwise.</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="F:Microsoft.Bot.Connector.TextFormatTypes.Markdown">
            <summary>
            Default- interpret text fields as markdown
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.TextFormatTypes.Plain">
            <summary>
            Plain text (do not interpret as anything)
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.TextFormatTypes.Xml">
            <summary>
            B, I, S, U, A NOTE: Only supported on Skype for now
            </summary>
        </member>
    </members>
</doc>
